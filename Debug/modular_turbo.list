
modular_turbo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005678  08005678  00006678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005874  08005874  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005874  08005874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800587c  0800587c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800587c  0800587c  0000687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005880  08005880  00006880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005884  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000005c  080058e0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080058e0  000073cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad3d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d31  00000000  00000000  00011dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00013b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e4  00000000  00000000  000142c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b788  00000000  00000000  000148a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b625  00000000  00000000  0003002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d37f  00000000  00000000  0003b651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d89d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c0  00000000  00000000  000d8a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000db0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005660 	.word	0x08005660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005660 	.word	0x08005660

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) //for the ReceiveToIdle_IT func.
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART2)  // Change if using a different UART
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	@ (80002c0 <HAL_UARTEx_RxEventCallback+0x40>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d110      	bne.n	80002b8 <HAL_UARTEx_RxEventCallback+0x38>
    {
        rxlen = Size;
 8000296:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <HAL_UARTEx_RxEventCallback+0x44>)
 8000298:	887b      	ldrh	r3, [r7, #2]
 800029a:	8013      	strh	r3, [r2, #0]
        rxcnt++;
 800029c:	4b0a      	ldr	r3, [pc, #40]	@ (80002c8 <HAL_UARTEx_RxEventCallback+0x48>)
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <HAL_UARTEx_RxEventCallback+0x48>)
 80002a6:	801a      	strh	r2, [r3, #0]
        receive_flag = true;
 80002a8:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <HAL_UARTEx_RxEventCallback+0x4c>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
        HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*)rxdata2, sizeof(rxdata2));
 80002ae:	2220      	movs	r2, #32
 80002b0:	4907      	ldr	r1, [pc, #28]	@ (80002d0 <HAL_UARTEx_RxEventCallback+0x50>)
 80002b2:	4808      	ldr	r0, [pc, #32]	@ (80002d4 <HAL_UARTEx_RxEventCallback+0x54>)
 80002b4:	f003 fffd 	bl	80042b2 <HAL_UARTEx_ReceiveToIdle_IT>
    }


}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40004400 	.word	0x40004400
 80002c4:	200001cc 	.word	0x200001cc
 80002c8:	200001ce 	.word	0x200001ce
 80002cc:	200001d0 	.word	0x200001d0
 80002d0:	200001a8 	.word	0x200001a8
 80002d4:	20000100 	.word	0x20000100

080002d8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	b093      	sub	sp, #76	@ 0x4c
 80002dc:	af10      	add	r7, sp, #64	@ 0x40
 80002de:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a11      	ldr	r2, [pc, #68]	@ (800032c <HAL_UART_TxCpltCallback+0x54>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d104      	bne.n	80002f4 <HAL_UART_TxCpltCallback+0x1c>
        // Transmission complete for huart1
		//master max3485 receiving
		HAL_GPIO_WritePin(GPIOB, master_direction_Pin, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2120      	movs	r1, #32
 80002ee:	4810      	ldr	r0, [pc, #64]	@ (8000330 <HAL_UART_TxCpltCallback+0x58>)
 80002f0:	f001 f972 	bl	80015d8 <HAL_GPIO_WritePin>


    }
    if (huart->Instance == USART2) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000334 <HAL_UART_TxCpltCallback+0x5c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d111      	bne.n	8000322 <HAL_UART_TxCpltCallback+0x4a>
		// Transmission complete for huart1

		free_telegram_memory(parsed_telegram);
 80002fe:	4e0e      	ldr	r6, [pc, #56]	@ (8000338 <HAL_UART_TxCpltCallback+0x60>)
 8000300:	466d      	mov	r5, sp
 8000302:	f106 0410 	add.w	r4, r6, #16
 8000306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800030a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800030c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800030e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000312:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000316:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800031a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800031e:	f000 fbf1 	bl	8000b04 <free_telegram_memory>
//			wait = true;
//			message_index++;
//			strcpy(rxdata2, messages[message_index]);
//		}
	}
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032a:	bf00      	nop
 800032c:	40013800 	.word	0x40013800
 8000330:	48000400 	.word	0x48000400
 8000334:	40004400 	.word	0x40004400
 8000338:	20000228 	.word	0x20000228

0800033c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    rxdata[rxIndex++] = rxByte;
 8000344:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <HAL_UART_RxCpltCallback+0x58>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	b291      	uxth	r1, r2
 800034c:	4a11      	ldr	r2, [pc, #68]	@ (8000394 <HAL_UART_RxCpltCallback+0x58>)
 800034e:	8011      	strh	r1, [r2, #0]
 8000350:	461a      	mov	r2, r3
 8000352:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <HAL_UART_RxCpltCallback+0x5c>)
 8000354:	7819      	ldrb	r1, [r3, #0]
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <HAL_UART_RxCpltCallback+0x60>)
 8000358:	5499      	strb	r1, [r3, r2]

    // Your custom termination logic here
    if (rxByte == '\r' || rxIndex >= sizeof(rxdata)) {
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <HAL_UART_RxCpltCallback+0x5c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b0d      	cmp	r3, #13
 8000360:	d003      	beq.n	800036a <HAL_UART_RxCpltCallback+0x2e>
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <HAL_UART_RxCpltCallback+0x58>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	2b1f      	cmp	r3, #31
 8000368:	d90b      	bls.n	8000382 <HAL_UART_RxCpltCallback+0x46>
        // Process complete message
    	rxdata[rxIndex] ='\0';  // \r has already been added. so now we end the str with \0
 800036a:	4b0a      	ldr	r3, [pc, #40]	@ (8000394 <HAL_UART_RxCpltCallback+0x58>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	461a      	mov	r2, r3
 8000370:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <HAL_UART_RxCpltCallback+0x60>)
 8000372:	2100      	movs	r1, #0
 8000374:	5499      	strb	r1, [r3, r2]
    	transmit_ready = true;
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <HAL_UART_RxCpltCallback+0x64>)
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
        rxIndex = 0;
 800037c:	4b05      	ldr	r3, [pc, #20]	@ (8000394 <HAL_UART_RxCpltCallback+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	801a      	strh	r2, [r3, #0]
    }

    // Restart single byte reception
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	4904      	ldr	r1, [pc, #16]	@ (8000398 <HAL_UART_RxCpltCallback+0x5c>)
 8000386:	4807      	ldr	r0, [pc, #28]	@ (80003a4 <HAL_UART_RxCpltCallback+0x68>)
 8000388:	f002 fd9a 	bl	8002ec0 <HAL_UART_Receive_IT>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000276 	.word	0x20000276
 8000398:	20000274 	.word	0x20000274
 800039c:	20000188 	.word	0x20000188
 80003a0:	200001d1 	.word	0x200001d1
 80003a4:	20000078 	.word	0x20000078

080003a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b099      	sub	sp, #100	@ 0x64
 80003ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ae:	f000 fd89 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b2:	f000 f91b 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b6:	f000 f9d3 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ba:	f000 f9a1 	bl	8000700 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003be:	f000 f96f 	bl	80006a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c8:	4870      	ldr	r0, [pc, #448]	@ (800058c <main+0x1e4>)
 80003ca:	f001 f905 	bl	80015d8 <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t*)rxdata2, sizeof(rxdata2));   //comment this line out for the looping method.
 80003ce:	2220      	movs	r2, #32
 80003d0:	496f      	ldr	r1, [pc, #444]	@ (8000590 <main+0x1e8>)
 80003d2:	4870      	ldr	r0, [pc, #448]	@ (8000594 <main+0x1ec>)
 80003d4:	f003 ff6d 	bl	80042b2 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80003d8:	2201      	movs	r2, #1
 80003da:	496f      	ldr	r1, [pc, #444]	@ (8000598 <main+0x1f0>)
 80003dc:	486f      	ldr	r0, [pc, #444]	@ (800059c <main+0x1f4>)
 80003de:	f002 fd6f 	bl	8002ec0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(next){					//'next' and 'wait' flags are for the looping method and will not affect anything if its kept there.
 80003e2:	4b6f      	ldr	r3, [pc, #444]	@ (80005a0 <main+0x1f8>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d006      	beq.n	80003fa <main+0x52>
		  HAL_Delay(2000);
 80003ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003f0:	f000 fdce 	bl	8000f90 <HAL_Delay>
		  receive_flag=true;
 80003f4:	4b6b      	ldr	r3, [pc, #428]	@ (80005a4 <main+0x1fc>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
	  }

	  if(wait){
 80003fa:	4b6b      	ldr	r3, [pc, #428]	@ (80005a8 <main+0x200>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b00      	cmp	r3, #0
 8000402:	d006      	beq.n	8000412 <main+0x6a>
		  HAL_Delay(1500);
 8000404:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000408:	f000 fdc2 	bl	8000f90 <HAL_Delay>
		  receive_flag = true;
 800040c:	4b65      	ldr	r3, [pc, #404]	@ (80005a4 <main+0x1fc>)
 800040e:	2201      	movs	r2, #1
 8000410:	701a      	strb	r2, [r3, #0]
	  }

	  if(transmit_ready){
 8000412:	4b66      	ldr	r3, [pc, #408]	@ (80005ac <main+0x204>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2b00      	cmp	r3, #0
 800041a:	d06d      	beq.n	80004f8 <main+0x150>
		  transmit_ready = false;
 800041c:	4b63      	ldr	r3, [pc, #396]	@ (80005ac <main+0x204>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]

		  if(rxdata[0] =='\0'){
 8000422:	4b63      	ldr	r3, [pc, #396]	@ (80005b0 <main+0x208>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d129      	bne.n	800047e <main+0xd6>
				// The new string is a pointer to the non-null character
				for (size_t i = 0; i < sizeof(rxdata) && rxdata[i] == '\0'; i++) {
 800042a:	2300      	movs	r3, #0
 800042c:	657b      	str	r3, [r7, #84]	@ 0x54
 800042e:	e007      	b.n	8000440 <main+0x98>
				  count++;
 8000430:	4b60      	ldr	r3, [pc, #384]	@ (80005b4 <main+0x20c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	4a5f      	ldr	r2, [pc, #380]	@ (80005b4 <main+0x20c>)
 8000438:	6013      	str	r3, [r2, #0]
				for (size_t i = 0; i < sizeof(rxdata) && rxdata[i] == '\0'; i++) {
 800043a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800043c:	3301      	adds	r3, #1
 800043e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000442:	2b1f      	cmp	r3, #31
 8000444:	d805      	bhi.n	8000452 <main+0xaa>
 8000446:	4a5a      	ldr	r2, [pc, #360]	@ (80005b0 <main+0x208>)
 8000448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800044a:	4413      	add	r3, r2
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0ee      	beq.n	8000430 <main+0x88>
				}
				char* newString = &rxdata[count];
 8000452:	4b58      	ldr	r3, [pc, #352]	@ (80005b4 <main+0x20c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a56      	ldr	r2, [pc, #344]	@ (80005b0 <main+0x208>)
 8000458:	4413      	add	r3, r2
 800045a:	653b      	str	r3, [r7, #80]	@ 0x50
				strcpy(rxdata, newString);
 800045c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800045e:	4854      	ldr	r0, [pc, #336]	@ (80005b0 <main+0x208>)
 8000460:	f004 f968 	bl	8004734 <strcpy>

				parsed_telegram = parse_telegram(rxdata);
 8000464:	4c54      	ldr	r4, [pc, #336]	@ (80005b8 <main+0x210>)
 8000466:	463b      	mov	r3, r7
 8000468:	4951      	ldr	r1, [pc, #324]	@ (80005b0 <main+0x208>)
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fa0c 	bl	8000888 <parse_telegram>
 8000470:	4620      	mov	r0, r4
 8000472:	463b      	mov	r3, r7
 8000474:	224c      	movs	r2, #76	@ 0x4c
 8000476:	4619      	mov	r1, r3
 8000478:	f004 f964 	bl	8004744 <memcpy>
 800047c:	e00b      	b.n	8000496 <main+0xee>
			}
			else{
				parsed_telegram = parse_telegram(rxdata);
 800047e:	4c4e      	ldr	r4, [pc, #312]	@ (80005b8 <main+0x210>)
 8000480:	463b      	mov	r3, r7
 8000482:	494b      	ldr	r1, [pc, #300]	@ (80005b0 <main+0x208>)
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f9ff 	bl	8000888 <parse_telegram>
 800048a:	4620      	mov	r0, r4
 800048c:	463b      	mov	r3, r7
 800048e:	224c      	movs	r2, #76	@ 0x4c
 8000490:	4619      	mov	r1, r3
 8000492:	f004 f957 	bl	8004744 <memcpy>
			}

			if (parsed_telegram.error_code == 0){
 8000496:	4b48      	ldr	r3, [pc, #288]	@ (80005b8 <main+0x210>)
 8000498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800049a:	2b00      	cmp	r3, #0
 800049c:	d10d      	bne.n	80004ba <main+0x112>
				 build_telegram(parsed_telegram.slave_address, parsed_telegram.action_char, parsed_telegram.param_number, parsed_telegram.data_length, parsed_telegram.command_str);
 800049e:	4b46      	ldr	r3, [pc, #280]	@ (80005b8 <main+0x210>)
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	4b45      	ldr	r3, [pc, #276]	@ (80005b8 <main+0x210>)
 80004a4:	68da      	ldr	r2, [r3, #12]
 80004a6:	4b44      	ldr	r3, [pc, #272]	@ (80005b8 <main+0x210>)
 80004a8:	6959      	ldr	r1, [r3, #20]
 80004aa:	4b43      	ldr	r3, [pc, #268]	@ (80005b8 <main+0x210>)
 80004ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	460b      	mov	r3, r1
 80004b2:	4942      	ldr	r1, [pc, #264]	@ (80005bc <main+0x214>)
 80004b4:	f000 fb38 	bl	8000b28 <build_telegram>
 80004b8:	e00c      	b.n	80004d4 <main+0x12c>
			}
			else{
				build_telegram(parsed_telegram.slave_address, "10\0", parsed_telegram.param_number, parsed_telegram.data_length, parsed_telegram.command_str);
 80004ba:	4b3f      	ldr	r3, [pc, #252]	@ (80005b8 <main+0x210>)
 80004bc:	6818      	ldr	r0, [r3, #0]
 80004be:	4b3e      	ldr	r3, [pc, #248]	@ (80005b8 <main+0x210>)
 80004c0:	68da      	ldr	r2, [r3, #12]
 80004c2:	4b3d      	ldr	r3, [pc, #244]	@ (80005b8 <main+0x210>)
 80004c4:	6959      	ldr	r1, [r3, #20]
 80004c6:	4b3c      	ldr	r3, [pc, #240]	@ (80005b8 <main+0x210>)
 80004c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	460b      	mov	r3, r1
 80004ce:	493c      	ldr	r1, [pc, #240]	@ (80005c0 <main+0x218>)
 80004d0:	f000 fb2a 	bl	8000b28 <build_telegram>
			}

			HAL_UART_Transmit_IT(&huart2, (uint8_t*)received_telegram, strlen(telegram)); //works
 80004d4:	483b      	ldr	r0, [pc, #236]	@ (80005c4 <main+0x21c>)
 80004d6:	f7ff fe7b 	bl	80001d0 <strlen>
 80004da:	4603      	mov	r3, r0
 80004dc:	b29b      	uxth	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	4939      	ldr	r1, [pc, #228]	@ (80005c8 <main+0x220>)
 80004e2:	482c      	ldr	r0, [pc, #176]	@ (8000594 <main+0x1ec>)
 80004e4:	f002 fc8e 	bl	8002e04 <HAL_UART_Transmit_IT>

			memset(rxdata, 0, sizeof(rxdata));
 80004e8:	2220      	movs	r2, #32
 80004ea:	2100      	movs	r1, #0
 80004ec:	4830      	ldr	r0, [pc, #192]	@ (80005b0 <main+0x208>)
 80004ee:	f004 f8c9 	bl	8004684 <memset>
			count=0;
 80004f2:	4b30      	ldr	r3, [pc, #192]	@ (80005b4 <main+0x20c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
		}

	  if (receive_flag){
 80004f8:	4b2a      	ldr	r3, [pc, #168]	@ (80005a4 <main+0x1fc>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	f43f af6f 	beq.w	80003e2 <main+0x3a>
		  wait=false;
 8000504:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <main+0x200>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
		  next = false;
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <main+0x1f8>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
		  receive_flag = false;
 8000510:	4b24      	ldr	r3, [pc, #144]	@ (80005a4 <main+0x1fc>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]

		  if(rxlen<=4){
 8000516:	4b2d      	ldr	r3, [pc, #180]	@ (80005cc <main+0x224>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	2b04      	cmp	r3, #4
 800051c:	d80e      	bhi.n	800053c <main+0x194>
			  sscanf((char*)rxdata2, "%d", &param);
 800051e:	4a2c      	ldr	r2, [pc, #176]	@ (80005d0 <main+0x228>)
 8000520:	492c      	ldr	r1, [pc, #176]	@ (80005d4 <main+0x22c>)
 8000522:	481b      	ldr	r0, [pc, #108]	@ (8000590 <main+0x1e8>)
 8000524:	f004 f880 	bl	8004628 <siscanf>
			  build_telegram(SLAVE_ADDR, QUERY_ACTION_CHAR, param, QUERY_DATA_LENGTH, QUERY_DATA);
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <main+0x228>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b2a      	ldr	r3, [pc, #168]	@ (80005d8 <main+0x230>)
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2302      	movs	r3, #2
 8000532:	492a      	ldr	r1, [pc, #168]	@ (80005dc <main+0x234>)
 8000534:	2001      	movs	r0, #1
 8000536:	f000 faf7 	bl	8000b28 <build_telegram>
 800053a:	e014      	b.n	8000566 <main+0x1be>
		  }
		  else{
			  sscanf((char*)rxdata2, "%d,%s", &param, data_to_send);
 800053c:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <main+0x238>)
 800053e:	4a24      	ldr	r2, [pc, #144]	@ (80005d0 <main+0x228>)
 8000540:	4928      	ldr	r1, [pc, #160]	@ (80005e4 <main+0x23c>)
 8000542:	4813      	ldr	r0, [pc, #76]	@ (8000590 <main+0x1e8>)
 8000544:	f004 f870 	bl	8004628 <siscanf>
			  build_telegram(SLAVE_ADDR, CTRL_ACTION_CHAR, param, strlen(data_to_send), data_to_send);
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <main+0x228>)
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	4824      	ldr	r0, [pc, #144]	@ (80005e0 <main+0x238>)
 800054e:	f7ff fe3f 	bl	80001d0 <strlen>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <main+0x238>)
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	4613      	mov	r3, r2
 800055c:	4622      	mov	r2, r4
 800055e:	4922      	ldr	r1, [pc, #136]	@ (80005e8 <main+0x240>)
 8000560:	2001      	movs	r0, #1
 8000562:	f000 fae1 	bl	8000b28 <build_telegram>
		  }

		HAL_GPIO_WritePin(GPIOB, master_direction_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	2120      	movs	r1, #32
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <main+0x1e4>)
 800056c:	f001 f834 	bl	80015d8 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000570:	20c8      	movs	r0, #200	@ 0xc8
 8000572:	f000 fd0d 	bl	8000f90 <HAL_Delay>
	    HAL_UART_Transmit_IT(&huart1, (uint8_t*)telegram, strlen(telegram));//works
 8000576:	4813      	ldr	r0, [pc, #76]	@ (80005c4 <main+0x21c>)
 8000578:	f7ff fe2a 	bl	80001d0 <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	b29b      	uxth	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	4910      	ldr	r1, [pc, #64]	@ (80005c4 <main+0x21c>)
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <main+0x1f4>)
 8000586:	f002 fc3d 	bl	8002e04 <HAL_UART_Transmit_IT>
	  if(next){					//'next' and 'wait' flags are for the looping method and will not affect anything if its kept there.
 800058a:	e72a      	b.n	80003e2 <main+0x3a>
 800058c:	48000400 	.word	0x48000400
 8000590:	200001a8 	.word	0x200001a8
 8000594:	20000100 	.word	0x20000100
 8000598:	20000274 	.word	0x20000274
 800059c:	20000078 	.word	0x20000078
 80005a0:	20000278 	.word	0x20000278
 80005a4:	200001d0 	.word	0x200001d0
 80005a8:	20000279 	.word	0x20000279
 80005ac:	200001d1 	.word	0x200001d1
 80005b0:	20000188 	.word	0x20000188
 80005b4:	200001c8 	.word	0x200001c8
 80005b8:	20000228 	.word	0x20000228
 80005bc:	2000022f 	.word	0x2000022f
 80005c0:	08005678 	.word	0x08005678
 80005c4:	200001d4 	.word	0x200001d4
 80005c8:	200001f4 	.word	0x200001f4
 80005cc:	200001cc 	.word	0x200001cc
 80005d0:	20000214 	.word	0x20000214
 80005d4:	0800567c 	.word	0x0800567c
 80005d8:	08005684 	.word	0x08005684
 80005dc:	08005680 	.word	0x08005680
 80005e0:	20000218 	.word	0x20000218
 80005e4:	08005688 	.word	0x08005688
 80005e8:	08005690 	.word	0x08005690

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	@ 0x70
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80005f6:	2228      	movs	r2, #40	@ 0x28
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 f842 	bl	8004684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2234      	movs	r2, #52	@ 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 f834 	bl	8004684 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000620:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000636:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000638:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800063c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000642:	4618      	mov	r0, r3
 8000644:	f000 ffe0 	bl	8001608 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800064e:	f000 f8ef 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000668:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800066c:	2102      	movs	r1, #2
 800066e:	4618      	mov	r0, r3
 8000670:	f001 ffd8 	bl	8002624 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800067a:	f000 f8d9 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800067e:	2301      	movs	r3, #1
 8000680:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4618      	mov	r0, r3
 800068a:	f002 f9dd 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000694:	f000 f8cc 	bl	8000830 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3770      	adds	r7, #112	@ 0x70
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <MX_USART1_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_USART1_UART_Init+0x58>)
 80006e4:	f002 fb40 	bl	8002d68 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f89f 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000078 	.word	0x20000078
 80006fc:	40013800 	.word	0x40013800

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	@ (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f002 fb10 	bl	8002d68 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f86f 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000100 	.word	0x20000100
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <MX_GPIO_Init+0xc4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <MX_GPIO_Init+0xc4>)
 800077c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <MX_GPIO_Init+0xc4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <MX_GPIO_Init+0xc4>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a24      	ldr	r2, [pc, #144]	@ (8000824 <MX_GPIO_Init+0xc4>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <MX_GPIO_Init+0xc4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <MX_GPIO_Init+0xc4>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <MX_GPIO_Init+0xc4>)
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_GPIO_Init+0xc4>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_GPIO_Init+0xc4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a18      	ldr	r2, [pc, #96]	@ (8000824 <MX_GPIO_Init+0xc4>)
 80007c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_GPIO_Init+0xc4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|master_direction_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f242 0120 	movw	r1, #8224	@ 0x2020
 80007dc:	4812      	ldr	r0, [pc, #72]	@ (8000828 <MX_GPIO_Init+0xc8>)
 80007de:	f000 fefb 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <MX_GPIO_Init+0xcc>)
 80007fa:	f000 fd7b 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin master_direction_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|master_direction_Pin;
 80007fe:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_GPIO_Init+0xc8>)
 8000818:	f000 fd6c 	bl	80012f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	@ 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400
 800082c:	48000800 	.word	0x48000800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <calculate_checksum>:
#include <stdlib.h>  // For malloc, free, atoi, atof
#include <string.h>  // For strlen, strncpy, strdup

// --- Helper Functions ---

int calculate_checksum(const char *data_segment) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    int sum_ascii = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < strlen(data_segment); i++) {
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	e00a      	b.n	8000864 <calculate_checksum+0x28>
        sum_ascii += (int)data_segment[i];
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < strlen(data_segment); i++) {
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	3301      	adds	r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fcb3 	bl	80001d0 <strlen>
 800086a:	4602      	mov	r2, r0
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	429a      	cmp	r2, r3
 8000870:	d8ed      	bhi.n	800084e <calculate_checksum+0x12>
    }
    return sum_ascii % 256;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	425a      	negs	r2, r3
 8000876:	b2db      	uxtb	r3, r3
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	bf58      	it	pl
 800087c:	4253      	negpl	r3, r2
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <parse_telegram>:


//NOTE: If memory is not allocated properly using malloc, then the code will run into a HardFault Interrupt.
//
Telegram parse_telegram(const char *raw_telegram_str) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b0bb      	sub	sp, #236	@ 0xec
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	Telegram error;
	char temp[32];

	// Copy the string into the buffer
	strcpy(temp, raw_telegram_str);
 8000892:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000896:	6839      	ldr	r1, [r7, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f003 ff4b 	bl	8004734 <strcpy>
    size_t len = strlen(raw_telegram_str); //
 800089e:	6838      	ldr	r0, [r7, #0]
 80008a0:	f7ff fc96 	bl	80001d0 <strlen>
 80008a4:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

    Telegram telegram;
    telegram.error_code = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	66bb      	str	r3, [r7, #104]	@ 0x68

    //-------Received Checksum------------
    char received_checksum_str[4];
    strncpy(received_checksum_str, &temp[len - 4], 3);		//stores the checksum.
 80008ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80008b0:	3b04      	subs	r3, #4
 80008b2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80008b6:	18d1      	adds	r1, r2, r3
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	2203      	movs	r2, #3
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fee8 	bl	8004694 <strncpy>
    received_checksum_str[3] = '\0';						//for atoi()
 80008c4:	2300      	movs	r3, #0
 80008c6:	77fb      	strb	r3, [r7, #31]
    telegram.checksum = atoi(received_checksum_str);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fd40 	bl	8004352 <atoi>
 80008d2:	4603      	mov	r3, r0
 80008d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    telegram.cr = temp[len - 1];							//stores Carriage return
 80008d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80008da:	3b01      	subs	r3, #1
 80008dc:	33e8      	adds	r3, #232	@ 0xe8
 80008de:	443b      	add	r3, r7
 80008e0:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 80008e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


    //create memory for data str
    telegram.command_str = (char *)malloc(telegram.data_length + 1);
 80008e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008ea:	3301      	adds	r3, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fd35 	bl	800435c <malloc>
 80008f2:	4603      	mov	r3, r0
 80008f4:	657b      	str	r3, [r7, #84]	@ 0x54
    //-------Calculate checksum------------
    char *data_for_checksum_calc = (char *)malloc(len - 4); 		//add 1 for the null terminator.
 80008f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80008fa:	3b04      	subs	r3, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fd2d 	bl	800435c <malloc>
 8000902:	4603      	mov	r3, r0
 8000904:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (data_for_checksum_calc == NULL) {
 8000908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d113      	bne.n	8000938 <parse_telegram+0xb0>
        error.error_code = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        strcpy(telegram.command_str, "000001");
 8000916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000918:	4a74      	ldr	r2, [pc, #464]	@ (8000aec <parse_telegram+0x264>)
 800091a:	6810      	ldr	r0, [r2, #0]
 800091c:	6018      	str	r0, [r3, #0]
 800091e:	8891      	ldrh	r1, [r2, #4]
 8000920:	7992      	ldrb	r2, [r2, #6]
 8000922:	8099      	strh	r1, [r3, #4]
 8000924:	719a      	strb	r2, [r3, #6]
        return error;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800092e:	224c      	movs	r2, #76	@ 0x4c
 8000930:	4619      	mov	r1, r3
 8000932:	f003 ff07 	bl	8004744 <memcpy>
 8000936:	e0d4      	b.n	8000ae2 <parse_telegram+0x25a>

    }
    strncpy(data_for_checksum_calc, temp, len - 4); 		//copy ascii chars till the checksum field of the telegram.i.e. index 0 to index len-5
 8000938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800093c:	1f1a      	subs	r2, r3, #4
 800093e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000942:	4619      	mov	r1, r3
 8000944:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000948:	f003 fea4 	bl	8004694 <strncpy>
    data_for_checksum_calc[len - 4] = '\0';
 800094c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000950:	3b04      	subs	r3, #4
 8000952:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000956:	4413      	add	r3, r2
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
    int calculated_checksum = calculate_checksum(data_for_checksum_calc);
 800095c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000960:	f7ff ff6c 	bl	800083c <calculate_checksum>
 8000964:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc



    //-------Compare checksum-------------
    if (telegram.checksum != calculated_checksum) {
 8000968:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800096a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800096e:	429a      	cmp	r2, r3
 8000970:	d01a      	beq.n	80009a8 <parse_telegram+0x120>
        telegram.checksum_ok = false;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        free(data_for_checksum_calc);
 8000978:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 800097c:	f003 fcf6 	bl	800436c <free>
        error.error_code = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        strcpy(telegram.command_str, "000002");
 8000986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000988:	4a59      	ldr	r2, [pc, #356]	@ (8000af0 <parse_telegram+0x268>)
 800098a:	6810      	ldr	r0, [r2, #0]
 800098c:	6018      	str	r0, [r3, #0]
 800098e:	8891      	ldrh	r1, [r2, #4]
 8000990:	7992      	ldrb	r2, [r2, #6]
 8000992:	8099      	strh	r1, [r3, #4]
 8000994:	719a      	strb	r2, [r3, #6]
        return error;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800099e:	224c      	movs	r2, #76	@ 0x4c
 80009a0:	4619      	mov	r1, r3
 80009a2:	f003 fecf 	bl	8004744 <memcpy>
 80009a6:	e09c      	b.n	8000ae2 <parse_telegram+0x25a>

    }
    telegram.checksum_ok = true;
 80009a8:	2301      	movs	r3, #1
 80009aa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64



    //-------Separate fields--------------
    char temp_buffer[20] = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]


    strncpy(temp_buffer, data_for_checksum_calc, 3); temp_buffer[3] = '\0'; 	//copies first 3 chars as slave addr to temp buffer.
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2203      	movs	r2, #3
 80009c4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fe63 	bl	8004694 <strncpy>
 80009ce:	2300      	movs	r3, #0
 80009d0:	72fb      	strb	r3, [r7, #11]
    telegram.slave_address = atoi(temp_buffer);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fcbb 	bl	8004352 <atoi>
 80009dc:	4603      	mov	r3, r0
 80009de:	623b      	str	r3, [r7, #32]
    sscanf(data_for_checksum_calc + 8, "%2d", &telegram.data_length);        //obtain length of data by adding an offset of 8.
 80009e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80009e4:	f103 0008 	add.w	r0, r3, #8
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	3314      	adds	r3, #20
 80009ee:	461a      	mov	r2, r3
 80009f0:	4940      	ldr	r1, [pc, #256]	@ (8000af4 <parse_telegram+0x26c>)
 80009f2:	f003 fe19 	bl	8004628 <siscanf>
    strncpy(telegram.action_char, "10\0", 3);//stores the action char
 80009f6:	4a40      	ldr	r2, [pc, #256]	@ (8000af8 <parse_telegram+0x270>)
 80009f8:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80009fc:	8811      	ldrh	r1, [r2, #0]
 80009fe:	7892      	ldrb	r2, [r2, #2]
 8000a00:	8019      	strh	r1, [r3, #0]
 8000a02:	709a      	strb	r2, [r3, #2]
    strncpy(temp_buffer, data_for_checksum_calc + 5, 3); temp_buffer[3] = '\0';	//copies the 3 chars of the param_number to temp_buffer by adding an offset of 5.
 8000a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000a08:	1d59      	adds	r1, r3, #5
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	2203      	movs	r2, #3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fe3f 	bl	8004694 <strncpy>
 8000a16:	2300      	movs	r3, #0
 8000a18:	72fb      	strb	r3, [r7, #11]
    telegram.param_number = atoi(temp_buffer);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fc97 	bl	8004352 <atoi>
 8000a24:	4603      	mov	r3, r0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c


    //-------Retrieve and Store Data---------
    int data_start_index = 10; //the index where the actual data starts always.
 8000a28:	230a      	movs	r3, #10
 8000a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

    //checks if out of bounds
	if (data_start_index + (telegram.data_length) > strlen(data_for_checksum_calc)) {
 8000a2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000a34:	4413      	add	r3, r2
 8000a36:	461c      	mov	r4, r3
 8000a38:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000a3c:	f7ff fbc8 	bl	80001d0 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	429c      	cmp	r4, r3
 8000a44:	d917      	bls.n	8000a76 <parse_telegram+0x1ee>
		free(data_for_checksum_calc);
 8000a46:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000a4a:	f003 fc8f 	bl	800436c <free>
		error.error_code = 3;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		strcpy(telegram.command_str, "000003");
 8000a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a56:	4a29      	ldr	r2, [pc, #164]	@ (8000afc <parse_telegram+0x274>)
 8000a58:	6810      	ldr	r0, [r2, #0]
 8000a5a:	6018      	str	r0, [r3, #0]
 8000a5c:	8891      	ldrh	r1, [r2, #4]
 8000a5e:	7992      	ldrb	r2, [r2, #6]
 8000a60:	8099      	strh	r1, [r3, #4]
 8000a62:	719a      	strb	r2, [r3, #6]
		return error;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000a6c:	224c      	movs	r2, #76	@ 0x4c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f003 fe68 	bl	8004744 <memcpy>
 8000a74:	e035      	b.n	8000ae2 <parse_telegram+0x25a>

	}
    strncpy(telegram.command_str, data_for_checksum_calc + data_start_index, telegram.data_length);	//copy data chars to data str
 8000a76:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000a7c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000a80:	4413      	add	r3, r2
 8000a82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a84:	4619      	mov	r1, r3
 8000a86:	f003 fe05 	bl	8004694 <strncpy>
    telegram.command_str[telegram.data_length] = '\0';
 8000a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a8e:	4413      	add	r3, r2
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]


	if (telegram.command_str == NULL) {
 8000a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d117      	bne.n	8000aca <parse_telegram+0x242>
		free(data_for_checksum_calc);
 8000a9a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000a9e:	f003 fc65 	bl	800436c <free>
		error.error_code = 4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		strcpy(telegram.command_str, "000004");
 8000aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aaa:	4a15      	ldr	r2, [pc, #84]	@ (8000b00 <parse_telegram+0x278>)
 8000aac:	6810      	ldr	r0, [r2, #0]
 8000aae:	6018      	str	r0, [r3, #0]
 8000ab0:	8891      	ldrh	r1, [r2, #4]
 8000ab2:	7992      	ldrb	r2, [r2, #6]
 8000ab4:	8099      	strh	r1, [r3, #4]
 8000ab6:	719a      	strb	r2, [r3, #6]
		return error;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000ac0:	224c      	movs	r2, #76	@ 0x4c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f003 fe3e 	bl	8004744 <memcpy>
 8000ac8:	e00b      	b.n	8000ae2 <parse_telegram+0x25a>
	}


    free(data_for_checksum_calc);
 8000aca:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000ace:	f003 fc4d 	bl	800436c <free>
    //remember to free telegram memory.
    return telegram;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f107 0320 	add.w	r3, r7, #32
 8000ada:	224c      	movs	r2, #76	@ 0x4c
 8000adc:	4619      	mov	r1, r3
 8000ade:	f003 fe31 	bl	8004744 <memcpy>
}
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	37ec      	adds	r7, #236	@ 0xec
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	08005694 	.word	0x08005694
 8000af0:	0800569c 	.word	0x0800569c
 8000af4:	080056a4 	.word	0x080056a4
 8000af8:	080056a8 	.word	0x080056a8
 8000afc:	080056ac 	.word	0x080056ac
 8000b00:	080056b4 	.word	0x080056b4

08000b04 <free_telegram_memory>:


void free_telegram_memory(Telegram telegram) {
 8000b04:	b084      	sub	sp, #16
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	f107 0c08 	add.w	ip, r7, #8
 8000b0e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    	free(telegram.command_str);
 8000b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fc29 	bl	800436c <free>
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b22:	b004      	add	sp, #16
 8000b24:	4770      	bx	lr
	...

08000b28 <build_telegram>:


extern char telegram[32];
extern char received_telegram[32];
void build_telegram(int slave_address, const char* action_char, int param_number, int data_length, const char *data_value_str) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b098      	sub	sp, #96	@ 0x60
 8000b2c:	af04      	add	r7, sp, #16
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
    char length_str[3];
    char checksum_str[4];



    sprintf(addr_str, "%03d", slave_address);
 8000b36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	492c      	ldr	r1, [pc, #176]	@ (8000bf0 <build_telegram+0xc8>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fd50 	bl	80045e4 <siprintf>
    sprintf(param_str, "%03d", param_number);
 8000b44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4929      	ldr	r1, [pc, #164]	@ (8000bf0 <build_telegram+0xc8>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 fd49 	bl	80045e4 <siprintf>
    sprintf(length_str, "%02d", data_length);
 8000b52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	4926      	ldr	r1, [pc, #152]	@ (8000bf4 <build_telegram+0xcc>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fd42 	bl	80045e4 <siprintf>

    //telegram_len = addr + action + zero + param + length + data + checksum + carriage return
    size_t telegram_len = 3 + 1 + 1 + 3 + 2 + data_length + 3 + 1;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	330e      	adds	r3, #14
 8000b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

    char telegram_buffer[32] = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fd88 	bl	8004684 <memset>

    //creates a buffer for the checksum string. -3 for ignoring the checksum field length and -1 for the carriage return field
    char *checksum_data_part_buffer = (char *)malloc(telegram_len - 3 - 1);
 8000b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b76:	3b04      	subs	r3, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fbef 	bl	800435c <malloc>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	64bb      	str	r3, [r7, #72]	@ 0x48
    sprintf(checksum_data_part_buffer, "%s%s%s%s%s",
 8000b82:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4917      	ldr	r1, [pc, #92]	@ (8000bf8 <build_telegram+0xd0>)
 8000b9a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000b9c:	f003 fd22 	bl	80045e4 <siprintf>
                    addr_str, action_char, param_str, length_str, data_value_str);

    int checksum_val = calculate_checksum(checksum_data_part_buffer);
 8000ba0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000ba2:	f7ff fe4b 	bl	800083c <calculate_checksum>
 8000ba6:	6478      	str	r0, [r7, #68]	@ 0x44
    sprintf(checksum_str, "%03d", checksum_val);
 8000ba8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bae:	4910      	ldr	r1, [pc, #64]	@ (8000bf0 <build_telegram+0xc8>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fd17 	bl	80045e4 <siprintf>

    sprintf(telegram_buffer, "%s%s%c",
 8000bb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bba:	f107 0014 	add.w	r0, r7, #20
 8000bbe:	220d      	movs	r2, #13
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000bc4:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <build_telegram+0xd4>)
 8000bc6:	f003 fd0d 	bl	80045e4 <siprintf>
    		checksum_data_part_buffer,
            checksum_str,
            (char)CR_ASCII);

    free(checksum_data_part_buffer);
 8000bca:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000bcc:	f003 fbce 	bl	800436c <free>
    strcpy(telegram,telegram_buffer);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <build_telegram+0xd8>)
 8000bd8:	f003 fdac 	bl	8004734 <strcpy>
    strcpy(received_telegram,telegram_buffer);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4808      	ldr	r0, [pc, #32]	@ (8000c04 <build_telegram+0xdc>)
 8000be4:	f003 fda6 	bl	8004734 <strcpy>
}
 8000be8:	bf00      	nop
 8000bea:	3750      	adds	r7, #80	@ 0x50
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	080056bc 	.word	0x080056bc
 8000bf4:	080056c4 	.word	0x080056c4
 8000bf8:	080056cc 	.word	0x080056cc
 8000bfc:	080056d8 	.word	0x080056d8
 8000c00:	200001d4 	.word	0x200001d4
 8000c04:	200001f4 	.word	0x200001f4

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a0e      	ldr	r2, [pc, #56]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_MspInit+0x44>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c3e:	2007      	movs	r0, #7
 8000c40:	f000 fa9a 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a37      	ldr	r2, [pc, #220]	@ (8000d4c <HAL_UART_MspInit+0xfc>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d132      	bne.n	8000cd8 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c72:	4b37      	ldr	r3, [pc, #220]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a36      	ldr	r2, [pc, #216]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b34      	ldr	r3, [pc, #208]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b31      	ldr	r3, [pc, #196]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a30      	ldr	r2, [pc, #192]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b2e      	ldr	r3, [pc, #184]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc2:	f000 fb17 	bl	80012f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2025      	movs	r0, #37	@ 0x25
 8000ccc:	f000 fa5f 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd0:	2025      	movs	r0, #37	@ 0x25
 8000cd2:	f000 fa78 	bl	80011c6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	e035      	b.n	8000d44 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8000d54 <HAL_UART_MspInit+0x104>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d130      	bne.n	8000d44 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_UART_MspInit+0x100>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d12:	230c      	movs	r3, #12
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d22:	2307      	movs	r3, #7
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f000 fae0 	bl	80012f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2026      	movs	r0, #38	@ 0x26
 8000d3a:	f000 fa28 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d3e:	2026      	movs	r0, #38	@ 0x26
 8000d40:	f000 fa41 	bl	80011c6 <HAL_NVIC_EnableIRQ>
}
 8000d44:	bf00      	nop
 8000d46:	3730      	adds	r7, #48	@ 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40004400 	.word	0x40004400

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 f8cf 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <USART1_IRQHandler+0x10>)
 8000dbe:	f002 f8c3 	bl	8002f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000078 	.word	0x20000078

08000dcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <USART2_IRQHandler+0x10>)
 8000dd2:	f002 f8b9 	bl	8002f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000100 	.word	0x20000100

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f003 fc64 	bl	80046dc <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20004000 	.word	0x20004000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000027c 	.word	0x2000027c
 8000e48:	200003d0 	.word	0x200003d0

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff ffea 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7a:	490d      	ldr	r1, [pc, #52]	@ (8000eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb4 <LoopForever+0xe>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e90:	4c0a      	ldr	r4, [pc, #40]	@ (8000ebc <LoopForever+0x16>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f003 fc23 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea2:	f7ff fa81 	bl	80003a8 <main>

08000ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea6:	e7fe      	b.n	8000ea6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ea8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000eb4:	08005884 	.word	0x08005884
  ldr r2, =_sbss
 8000eb8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ebc:	200003cc 	.word	0x200003cc

08000ec0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_Init+0x28>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <HAL_Init+0x28>)
 8000ece:	f043 0310 	orr.w	r3, r3, #16
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f94f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe92 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40022000 	.word	0x40022000

08000ef0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f967 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f92f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000280 	.word	0x20000280

08000f78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000280 	.word	0x20000280

08000f90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e02e      	b.n	800126a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001212:	2b02      	cmp	r3, #2
 8001214:	d008      	beq.n	8001228 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2204      	movs	r2, #4
 800121a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e020      	b.n	800126a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020e 	bic.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001250:	2101      	movs	r1, #1
 8001252:	fa01 f202 	lsl.w	r2, r1, r2
 8001256:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001288:	2b02      	cmp	r3, #2
 800128a:	d005      	beq.n	8001298 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e027      	b.n	80012e8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 020e 	bic.w	r2, r2, #14
 80012a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
    }
  }
  return status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e14e      	b.n	80015a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8140 	beq.w	800159c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d005      	beq.n	8001334 <HAL_GPIO_Init+0x40>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 0201 	and.w	r2, r3, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d017      	beq.n	80013d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d123      	bne.n	8001426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0203 	and.w	r2, r3, #3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 809a 	beq.w	800159c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <HAL_GPIO_Init+0x2cc>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a54      	ldr	r2, [pc, #336]	@ (80015c0 <HAL_GPIO_Init+0x2cc>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b52      	ldr	r3, [pc, #328]	@ (80015c0 <HAL_GPIO_Init+0x2cc>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001480:	4a50      	ldr	r2, [pc, #320]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014aa:	d013      	beq.n	80014d4 <HAL_GPIO_Init+0x1e0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a46      	ldr	r2, [pc, #280]	@ (80015c8 <HAL_GPIO_Init+0x2d4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d00d      	beq.n	80014d0 <HAL_GPIO_Init+0x1dc>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a45      	ldr	r2, [pc, #276]	@ (80015cc <HAL_GPIO_Init+0x2d8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d007      	beq.n	80014cc <HAL_GPIO_Init+0x1d8>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a44      	ldr	r2, [pc, #272]	@ (80015d0 <HAL_GPIO_Init+0x2dc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d101      	bne.n	80014c8 <HAL_GPIO_Init+0x1d4>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e006      	b.n	80014d6 <HAL_GPIO_Init+0x1e2>
 80014c8:	2305      	movs	r3, #5
 80014ca:	e004      	b.n	80014d6 <HAL_GPIO_Init+0x1e2>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_Init+0x1e2>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <HAL_GPIO_Init+0x1e2>
 80014d4:	2300      	movs	r3, #0
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	f002 0203 	and.w	r2, r2, #3
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	4093      	lsls	r3, r2
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e6:	4937      	ldr	r1, [pc, #220]	@ (80015c4 <HAL_GPIO_Init+0x2d0>)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f4:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001518:	4a2e      	ldr	r2, [pc, #184]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001542:	4a24      	ldr	r2, [pc, #144]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_GPIO_Init+0x2e0>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f47f aea9 	bne.w	8001304 <HAL_GPIO_Init+0x10>
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800160e:	af00      	add	r7, sp, #0
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001618:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	f000 bff4 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001632:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 816d 	beq.w	800191e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001644:	4bb4      	ldr	r3, [pc, #720]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b04      	cmp	r3, #4
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001650:	4bb1      	ldr	r3, [pc, #708]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d157      	bne.n	800170c <HAL_RCC_OscConfig+0x104>
 800165c:	4bae      	ldr	r3, [pc, #696]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001668:	d150      	bne.n	800170c <HAL_RCC_OscConfig+0x104>
 800166a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800166e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001676:	fa93 f3a3 	rbit	r3, r3
 800167a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800167e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b3f      	cmp	r3, #63	@ 0x3f
 800168a:	d802      	bhi.n	8001692 <HAL_RCC_OscConfig+0x8a>
 800168c:	4ba2      	ldr	r3, [pc, #648]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0xb6>
 8001692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001696:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80016a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016aa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80016ae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80016ba:	4b97      	ldr	r3, [pc, #604]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016c2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80016c6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80016ca:	fa92 f2a2 	rbit	r2, r2
 80016ce:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80016d2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80016d6:	fab2 f282 	clz	r2, r2
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f042 0220 	orr.w	r2, r2, #32
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	f002 021f 	and.w	r2, r2, #31
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8114 	beq.w	800191c <HAL_RCC_OscConfig+0x314>
 80016f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 810b 	bne.w	800191c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f000 bf85 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171c:	d106      	bne.n	800172c <HAL_RCC_OscConfig+0x124>
 800171e:	4b7e      	ldr	r3, [pc, #504]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7d      	ldr	r2, [pc, #500]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e036      	b.n	800179a <HAL_RCC_OscConfig+0x192>
 800172c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x14e>
 800173c:	4b76      	ldr	r3, [pc, #472]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a75      	ldr	r2, [pc, #468]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b73      	ldr	r3, [pc, #460]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a72      	ldr	r2, [pc, #456]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800174e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e021      	b.n	800179a <HAL_RCC_OscConfig+0x192>
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_OscConfig+0x17a>
 8001768:	4b6b      	ldr	r3, [pc, #428]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6a      	ldr	r2, [pc, #424]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800176e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b68      	ldr	r3, [pc, #416]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a67      	ldr	r2, [pc, #412]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e00b      	b.n	800179a <HAL_RCC_OscConfig+0x192>
 8001782:	4b65      	ldr	r3, [pc, #404]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a64      	ldr	r2, [pc, #400]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b62      	ldr	r3, [pc, #392]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a61      	ldr	r2, [pc, #388]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001798:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800179a:	4b5f      	ldr	r3, [pc, #380]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 800179c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179e:	f023 020f 	bic.w	r2, r3, #15
 80017a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	495a      	ldr	r1, [pc, #360]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d054      	beq.n	800186e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fbd8 	bl	8000f78 <HAL_GetTick>
 80017c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ce:	f7ff fbd3 	bl	8000f78 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d902      	bls.n	80017e4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	f000 bf19 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
 80017e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017e8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80017f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b3f      	cmp	r3, #63	@ 0x3f
 8001804:	d802      	bhi.n	800180c <HAL_RCC_OscConfig+0x204>
 8001806:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	e015      	b.n	8001838 <HAL_RCC_OscConfig+0x230>
 800180c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001810:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001824:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001828:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800182c:	fa93 f3a3 	rbit	r3, r3
 8001830:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001834:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800183c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001840:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001844:	fa92 f2a2 	rbit	r2, r2
 8001848:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800184c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f042 0220 	orr.w	r2, r2, #32
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	f002 021f 	and.w	r2, r2, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f202 	lsl.w	r2, r1, r2
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0b0      	beq.n	80017ce <HAL_RCC_OscConfig+0x1c6>
 800186c:	e057      	b.n	800191e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff fb83 	bl	8000f78 <HAL_GetTick>
 8001872:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fb7e 	bl	8000f78 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b64      	cmp	r3, #100	@ 0x64
 8001886:	d902      	bls.n	800188e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	f000 bec4 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
 800188e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001892:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80018a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80018ae:	d802      	bhi.n	80018b6 <HAL_RCC_OscConfig+0x2ae>
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e015      	b.n	80018e2 <HAL_RCC_OscConfig+0x2da>
 80018b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80018c2:	fa93 f3a3 	rbit	r3, r3
 80018c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80018ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80018d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_RCC_OscConfig+0x310>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018e6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80018ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80018ee:	fa92 f2a2 	rbit	r2, r2
 80018f2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80018f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80018fa:	fab2 f282 	clz	r2, r2
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f042 0220 	orr.w	r2, r2, #32
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f002 021f 	and.w	r2, r2, #31
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1b0      	bne.n	8001878 <HAL_RCC_OscConfig+0x270>
 8001916:	e002      	b.n	800191e <HAL_RCC_OscConfig+0x316>
 8001918:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 816c 	beq.w	8001c0c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001934:	4bcc      	ldr	r3, [pc, #816]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00b      	beq.n	8001958 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001940:	4bc9      	ldr	r3, [pc, #804]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d16d      	bne.n	8001a28 <HAL_RCC_OscConfig+0x420>
 800194c:	4bc6      	ldr	r3, [pc, #792]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d167      	bne.n	8001a28 <HAL_RCC_OscConfig+0x420>
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800196a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b3f      	cmp	r3, #63	@ 0x3f
 8001976:	d802      	bhi.n	800197e <HAL_RCC_OscConfig+0x376>
 8001978:	4bbb      	ldr	r3, [pc, #748]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	e013      	b.n	80019a6 <HAL_RCC_OscConfig+0x39e>
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001996:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80019a2:	4bb1      	ldr	r3, [pc, #708]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	2202      	movs	r2, #2
 80019a8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80019ac:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80019b0:	fa92 f2a2 	rbit	r2, r2
 80019b4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80019b8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <HAL_RCC_OscConfig+0x3e6>
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d002      	beq.n	80019ee <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f000 be14 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	21f8      	movs	r1, #248	@ 0xf8
 8001a04:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a0c:	fa91 f1a1 	rbit	r1, r1
 8001a10:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001a14:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001a18:	fab1 f181 	clz	r1, r1
 8001a1c:	b2c9      	uxtb	r1, r1
 8001a1e:	408b      	lsls	r3, r1
 8001a20:	4991      	ldr	r1, [pc, #580]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	e0f1      	b.n	8001c0c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8083 	beq.w	8001b40 <HAL_RCC_OscConfig+0x538>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001a4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	461a      	mov	r2, r3
 8001a62:	2301      	movs	r3, #1
 8001a64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fa87 	bl	8000f78 <HAL_GetTick>
 8001a6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fa82 	bl	8000f78 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d902      	bls.n	8001a86 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f000 bdc8 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001a98:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aa4:	d802      	bhi.n	8001aac <HAL_RCC_OscConfig+0x4a4>
 8001aa6:	4b70      	ldr	r3, [pc, #448]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	e013      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4cc>
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ac4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ad0:	4b65      	ldr	r3, [pc, #404]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001ada:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001ade:	fa92 f2a2 	rbit	r2, r2
 8001ae2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001ae6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001aea:	fab2 f282 	clz	r2, r2
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f042 0220 	orr.w	r2, r2, #32
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f002 021f 	and.w	r2, r2, #31
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0b4      	beq.n	8001a70 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b06:	4b58      	ldr	r3, [pc, #352]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	21f8      	movs	r1, #248	@ 0xf8
 8001b1c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b24:	fa91 f1a1 	rbit	r1, r1
 8001b28:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001b2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001b30:	fab1 f181 	clz	r1, r1
 8001b34:	b2c9      	uxtb	r1, r1
 8001b36:	408b      	lsls	r3, r1
 8001b38:	494b      	ldr	r1, [pc, #300]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
 8001b3e:	e065      	b.n	8001c0c <HAL_RCC_OscConfig+0x604>
 8001b40:	2301      	movs	r3, #1
 8001b42:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001b52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	461a      	mov	r2, r3
 8001b68:	2300      	movs	r3, #0
 8001b6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fa04 	bl	8000f78 <HAL_GetTick>
 8001b70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b76:	f7ff f9ff 	bl	8000f78 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d902      	bls.n	8001b8c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	f000 bd45 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001baa:	d802      	bhi.n	8001bb2 <HAL_RCC_OscConfig+0x5aa>
 8001bac:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	e013      	b.n	8001bda <HAL_RCC_OscConfig+0x5d2>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001bca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001bd6:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <HAL_RCC_OscConfig+0x660>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001be0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001be4:	fa92 f2a2 	rbit	r2, r2
 8001be8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001bec:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001bf0:	fab2 f282 	clz	r2, r2
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f042 0220 	orr.w	r2, r2, #32
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	f002 021f 	and.w	r2, r2, #31
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1b4      	bne.n	8001b76 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8115 	beq.w	8001e4c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d07e      	beq.n	8001d30 <HAL_RCC_OscConfig+0x728>
 8001c32:	2301      	movs	r3, #1
 8001c34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_RCC_OscConfig+0x664>)
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	461a      	mov	r2, r3
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f98c 	bl	8000f78 <HAL_GetTick>
 8001c60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c64:	e00f      	b.n	8001c86 <HAL_RCC_OscConfig+0x67e>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff f982 	bl	8000f78 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d902      	bls.n	8001c86 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f000 bcc8 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce0:	4bb0      	ldr	r3, [pc, #704]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001ce2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cec:	2102      	movs	r1, #2
 8001cee:	6019      	str	r1, [r3, #0]
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f1a3 	rbit	r1, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d06:	6019      	str	r1, [r3, #0]
  return result;
 8001d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2101      	movs	r1, #1
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0a0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x668>
 8001d2e:	e08d      	b.n	8001e4c <HAL_RCC_OscConfig+0x844>
 8001d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d34:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fa93 f2a3 	rbit	r2, r3
 8001d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d52:	601a      	str	r2, [r3, #0]
  return result;
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b90      	ldr	r3, [pc, #576]	@ (8001fa8 <HAL_RCC_OscConfig+0x9a0>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2300      	movs	r3, #0
 8001d70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d72:	f7ff f901 	bl	8000f78 <HAL_GetTick>
 8001d76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff f8fc 	bl	8000f78 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 bc42 	b.w	8002616 <HAL_RCC_OscConfig+0x100e>
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001de2:	2202      	movs	r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001dfc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfe:	4b69      	ldr	r3, [pc, #420]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001e00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	6019      	str	r1, [r3, #0]
 8001e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fa93 f1a3 	rbit	r1, r3
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e24:	6019      	str	r1, [r3, #0]
  return result;
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d197      	bne.n	8001d7c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 819e 	beq.w	800219e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e68:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d116      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	61d3      	str	r3, [r2, #28]
 8001e80:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e96:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001e9a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b42      	ldr	r3, [pc, #264]	@ (8001fac <HAL_RCC_OscConfig+0x9a4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <HAL_RCC_OscConfig+0x9a4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fac <HAL_RCC_OscConfig+0x9a4>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7ff f85d 	bl	8000f78 <HAL_GetTick>
 8001ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	e009      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7ff f858 	bl	8000f78 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e39e      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b34      	ldr	r3, [pc, #208]	@ (8001fac <HAL_RCC_OscConfig+0x9a4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ef      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x8fa>
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	e035      	b.n	8001f6e <HAL_RCC_OscConfig+0x966>
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x924>
 8001f12:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a23      	ldr	r2, [pc, #140]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a20      	ldr	r2, [pc, #128]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	e020      	b.n	8001f6e <HAL_RCC_OscConfig+0x966>
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b05      	cmp	r3, #5
 8001f3a:	d10c      	bne.n	8001f56 <HAL_RCC_OscConfig+0x94e>
 8001f3c:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a15      	ldr	r2, [pc, #84]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	e00b      	b.n	8001f6e <HAL_RCC_OscConfig+0x966>
 8001f56:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6213      	str	r3, [r2, #32]
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa4 <HAL_RCC_OscConfig+0x99c>)
 8001f68:	f023 0304 	bic.w	r3, r3, #4
 8001f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8087 	beq.w	800208e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7fe fffa 	bl	8000f78 <HAL_GetTick>
 8001f84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	e012      	b.n	8001fb0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fff5 	bl	8000f78 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d908      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e339      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	10908120 	.word	0x10908120
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001fdc:	2202      	movs	r2, #2
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ff6:	601a      	str	r2, [r3, #0]
  return result;
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002000:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_RCC_OscConfig+0xa10>
 8002012:	4b98      	ldr	r3, [pc, #608]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	e013      	b.n	8002040 <HAL_RCC_OscConfig+0xa38>
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	fa93 f2a3 	rbit	r2, r3
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	4b8d      	ldr	r3, [pc, #564]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002044:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002048:	2102      	movs	r1, #2
 800204a:	6011      	str	r1, [r2, #0]
 800204c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002050:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	fa92 f1a2 	rbit	r1, r2
 800205a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800205e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002062:	6011      	str	r1, [r2, #0]
  return result;
 8002064:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002068:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f002 021f 	and.w	r2, r2, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	f43f af7f 	beq.w	8001f8a <HAL_RCC_OscConfig+0x982>
 800208c:	e07d      	b.n	800218a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7fe ff73 	bl	8000f78 <HAL_GetTick>
 8002092:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7fe ff6e 	bl	8000f78 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e2b2      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
 80020b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020b8:	2202      	movs	r2, #2
 80020ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	fa93 f2a3 	rbit	r2, r3
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80020f6:	601a      	str	r2, [r3, #0]
  return result;
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002100:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d102      	bne.n	8002118 <HAL_RCC_OscConfig+0xb10>
 8002112:	4b58      	ldr	r3, [pc, #352]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	e013      	b.n	8002140 <HAL_RCC_OscConfig+0xb38>
 8002118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002120:	2202      	movs	r2, #2
 8002122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002128:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002136:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	4b4d      	ldr	r3, [pc, #308]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002144:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002148:	2102      	movs	r1, #2
 800214a:	6011      	str	r1, [r2, #0]
 800214c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002150:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	fa92 f1a2 	rbit	r1, r2
 800215a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800215e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002162:	6011      	str	r1, [r2, #0]
  return result;
 8002164:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002168:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	f002 021f 	and.w	r2, r2, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f202 	lsl.w	r2, r1, r2
 8002184:	4013      	ands	r3, r2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d186      	bne.n	8002098 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800218a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b38      	ldr	r3, [pc, #224]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a37      	ldr	r2, [pc, #220]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8232 	beq.w	8002614 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	f000 8201 	beq.w	80025c0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	f040 8157 	bne.w	800247e <HAL_RCC_OscConfig+0xe76>
 80021d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80021d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f2a3 	rbit	r2, r3
 80021ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80021f4:	601a      	str	r2, [r3, #0]
  return result;
 80021f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80021fe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800220a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	461a      	mov	r2, r3
 8002212:	2300      	movs	r3, #0
 8002214:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe feaf 	bl	8000f78 <HAL_GetTick>
 800221a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e009      	b.n	8002234 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe feaa 	bl	8000f78 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1f0      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800223c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002246:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002254:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002258:	601a      	str	r2, [r3, #0]
  return result;
 800225a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002262:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b3f      	cmp	r3, #63	@ 0x3f
 800226c:	d804      	bhi.n	8002278 <HAL_RCC_OscConfig+0xc70>
 800226e:	4b01      	ldr	r3, [pc, #4]	@ (8002274 <HAL_RCC_OscConfig+0xc6c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e029      	b.n	80022c8 <HAL_RCC_OscConfig+0xcc0>
 8002274:	40021000 	.word	0x40021000
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002280:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002298:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022be:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	4bc3      	ldr	r3, [pc, #780]	@ (80025d4 <HAL_RCC_OscConfig+0xfcc>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022cc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80022d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022d4:	6011      	str	r1, [r2, #0]
 80022d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022da:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fa92 f1a2 	rbit	r1, r2
 80022e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022e8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80022ec:	6011      	str	r1, [r2, #0]
  return result;
 80022ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022f2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d185      	bne.n	8002220 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002314:	4baf      	ldr	r3, [pc, #700]	@ (80025d4 <HAL_RCC_OscConfig+0xfcc>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	430b      	orrs	r3, r1
 8002336:	49a7      	ldr	r1, [pc, #668]	@ (80025d4 <HAL_RCC_OscConfig+0xfcc>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002344:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f2a3 	rbit	r2, r3
 8002358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002360:	601a      	str	r2, [r3, #0]
  return result;
 8002362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002366:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800236a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002376:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	461a      	mov	r2, r3
 800237e:	2301      	movs	r3, #1
 8002380:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe fdf9 	bl	8000f78 <HAL_GetTick>
 8002386:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238a:	e009      	b.n	80023a0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fdf4 	bl	8000f78 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e13a      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80023c4:	601a      	str	r2, [r3, #0]
  return result;
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80023ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80023d8:	d802      	bhi.n	80023e0 <HAL_RCC_OscConfig+0xdd8>
 80023da:	4b7e      	ldr	r3, [pc, #504]	@ (80025d4 <HAL_RCC_OscConfig+0xfcc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	e027      	b.n	8002430 <HAL_RCC_OscConfig+0xe28>
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80023e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fa93 f2a3 	rbit	r2, r3
 80023fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002400:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800240e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002418:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	fa93 f2a3 	rbit	r2, r3
 8002422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002426:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	4b69      	ldr	r3, [pc, #420]	@ (80025d4 <HAL_RCC_OscConfig+0xfcc>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002434:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002438:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800243c:	6011      	str	r1, [r2, #0]
 800243e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002442:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fa92 f1a2 	rbit	r1, r2
 800244c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002450:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002454:	6011      	str	r1, [r2, #0]
  return result;
 8002456:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fab2 f282 	clz	r2, r2
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	f042 0220 	orr.w	r2, r2, #32
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	f002 021f 	and.w	r2, r2, #31
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d087      	beq.n	800238c <HAL_RCC_OscConfig+0xd84>
 800247c:	e0ca      	b.n	8002614 <HAL_RCC_OscConfig+0x100c>
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002486:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024a2:	601a      	str	r2, [r3, #0]
  return result;
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80024ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	461a      	mov	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fd58 	bl	8000f78 <HAL_GetTick>
 80024c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	e009      	b.n	80024e2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe fd53 	bl	8000f78 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e099      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80024ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f2a3 	rbit	r2, r3
 80024fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002502:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002506:	601a      	str	r2, [r3, #0]
  return result;
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002510:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b3f      	cmp	r3, #63	@ 0x3f
 800251a:	d802      	bhi.n	8002522 <HAL_RCC_OscConfig+0xf1a>
 800251c:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <HAL_RCC_OscConfig+0xfcc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	e027      	b.n	8002572 <HAL_RCC_OscConfig+0xf6a>
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800252a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800252e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002550:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <HAL_RCC_OscConfig+0xfcc>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002576:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800257a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800257e:	6011      	str	r1, [r2, #0]
 8002580:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002584:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	fa92 f1a2 	rbit	r1, r2
 800258e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002592:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002596:	6011      	str	r1, [r2, #0]
  return result;
 8002598:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800259c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	fab2 f282 	clz	r2, r2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f042 0220 	orr.w	r2, r2, #32
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f002 021f 	and.w	r2, r2, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d187      	bne.n	80024ce <HAL_RCC_OscConfig+0xec6>
 80025be:	e029      	b.n	8002614 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d103      	bne.n	80025d8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e020      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
 80025d4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d8:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <HAL_RCC_OscConfig+0x1018>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80025e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10b      	bne.n	8002610 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80025fc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b09e      	sub	sp, #120	@ 0x78
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e154      	b.n	80028e6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b89      	ldr	r3, [pc, #548]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b86      	ldr	r3, [pc, #536]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4984      	ldr	r1, [pc, #528]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b82      	ldr	r3, [pc, #520]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e13c      	b.n	80028e6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b7b      	ldr	r3, [pc, #492]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4978      	ldr	r1, [pc, #480]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80cd 	beq.w	8002832 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d137      	bne.n	8002710 <HAL_RCC_ClockConfig+0xec>
 80026a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80026b8:	d802      	bhi.n	80026c0 <HAL_RCC_ClockConfig+0x9c>
 80026ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_ClockConfig+0xbc>
 80026c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80026ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80026d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026dc:	4b62      	ldr	r3, [pc, #392]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026e8:	fa92 f2a2 	rbit	r2, r2
 80026ec:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80026ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d171      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0ea      	b.n	80028e6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d137      	bne.n	8002788 <HAL_RCC_ClockConfig+0x164>
 8002718:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800271c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002730:	d802      	bhi.n	8002738 <HAL_RCC_ClockConfig+0x114>
 8002732:	4b4d      	ldr	r3, [pc, #308]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e00f      	b.n	8002758 <HAL_RCC_ClockConfig+0x134>
 8002738:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	647b      	str	r3, [r7, #68]	@ 0x44
 8002746:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800274a:	643b      	str	r3, [r7, #64]	@ 0x40
 800274c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002754:	4b44      	ldr	r3, [pc, #272]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800275c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800275e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002760:	fa92 f2a2 	rbit	r2, r2
 8002764:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d135      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0ae      	b.n	80028e6 <HAL_RCC_ClockConfig+0x2c2>
 8002788:	2302      	movs	r3, #2
 800278a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b3f      	cmp	r3, #63	@ 0x3f
 800279e:	d802      	bhi.n	80027a6 <HAL_RCC_ClockConfig+0x182>
 80027a0:	4b31      	ldr	r3, [pc, #196]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e00d      	b.n	80027c2 <HAL_RCC_ClockConfig+0x19e>
 80027a6:	2302      	movs	r3, #2
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	2202      	movs	r2, #2
 80027c4:	61ba      	str	r2, [r7, #24]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	617a      	str	r2, [r7, #20]
  return result;
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f042 0220 	orr.w	r2, r2, #32
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f002 021f 	and.w	r2, r2, #31
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e07a      	b.n	80028e6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 0203 	bic.w	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	491a      	ldr	r1, [pc, #104]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002802:	f7fe fbb9 	bl	8000f78 <HAL_GetTick>
 8002806:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002808:	e00a      	b.n	8002820 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280a:	f7fe fbb5 	bl	8000f78 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e062      	b.n	80028e6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 020c 	and.w	r2, r3, #12
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	429a      	cmp	r2, r3
 8002830:	d1eb      	bne.n	800280a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d215      	bcs.n	800286c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 0207 	bic.w	r2, r3, #7
 8002848:	4906      	ldr	r1, [pc, #24]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d006      	beq.n	800286c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e041      	b.n	80028e6 <HAL_RCC_ClockConfig+0x2c2>
 8002862:	bf00      	nop
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002878:	4b1d      	ldr	r3, [pc, #116]	@ (80028f0 <HAL_RCC_ClockConfig+0x2cc>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	491a      	ldr	r1, [pc, #104]	@ (80028f0 <HAL_RCC_ClockConfig+0x2cc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <HAL_RCC_ClockConfig+0x2cc>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4912      	ldr	r1, [pc, #72]	@ (80028f0 <HAL_RCC_ClockConfig+0x2cc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028aa:	f000 f829 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028ae:	4601      	mov	r1, r0
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_RCC_ClockConfig+0x2cc>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028b8:	22f0      	movs	r2, #240	@ 0xf0
 80028ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	fa92 f2a2 	rbit	r2, r2
 80028c2:	60fa      	str	r2, [r7, #12]
  return result;
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	fab2 f282 	clz	r2, r2
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	40d3      	lsrs	r3, r2
 80028ce:	4a09      	ldr	r2, [pc, #36]	@ (80028f4 <HAL_RCC_ClockConfig+0x2d0>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	fa21 f303 	lsr.w	r3, r1, r3
 80028d6:	4a08      	ldr	r2, [pc, #32]	@ (80028f8 <HAL_RCC_ClockConfig+0x2d4>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <HAL_RCC_ClockConfig+0x2d8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fb06 	bl	8000ef0 <HAL_InitTick>
  
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3778      	adds	r7, #120	@ 0x78
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080056ec 	.word	0x080056ec
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000004 	.word	0x20000004

08002900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800291a:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d002      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x30>
 800292a:	2b08      	cmp	r3, #8
 800292c:	d003      	beq.n	8002936 <HAL_RCC_GetSysClockFreq+0x36>
 800292e:	e026      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	613b      	str	r3, [r7, #16]
      break;
 8002934:	e026      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0c9b      	lsrs	r3, r3, #18
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	4a17      	ldr	r2, [pc, #92]	@ (800299c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002944:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x94>)
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800295c:	4a0e      	ldr	r2, [pc, #56]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	fbb2 f2f3 	udiv	r2, r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	e004      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a0c      	ldr	r2, [pc, #48]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	613b      	str	r3, [r7, #16]
      break;
 800297c:	e002      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x98>)
 8002980:	613b      	str	r3, [r7, #16]
      break;
 8002982:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002984:	693b      	ldr	r3, [r7, #16]
}
 8002986:	4618      	mov	r0, r3
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	007a1200 	.word	0x007a1200
 800299c:	08005704 	.word	0x08005704
 80029a0:	08005714 	.word	0x08005714
 80029a4:	003d0900 	.word	0x003d0900

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000000 	.word	0x20000000

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029c6:	f7ff ffef 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029ca:	4601      	mov	r1, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80029d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	603a      	str	r2, [r7, #0]
  return result;
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	40d3      	lsrs	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x40>)
 80029ee:	5cd3      	ldrb	r3, [r2, r3]
 80029f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	080056fc 	.word	0x080056fc

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a0a:	f7ff ffcd 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 8002a0e:	4601      	mov	r1, r0
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002a18:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002a1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	fa92 f2a2 	rbit	r2, r2
 8002a24:	603a      	str	r2, [r7, #0]
  return result;
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	40d3      	lsrs	r3, r2
 8002a30:	4a04      	ldr	r2, [pc, #16]	@ (8002a44 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	080056fc 	.word	0x080056fc

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b092      	sub	sp, #72	@ 0x48
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80d2 	beq.w	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10e      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a49      	ldr	r2, [pc, #292]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b47      	ldr	r3, [pc, #284]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b44      	ldr	r3, [pc, #272]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a40      	ldr	r2, [pc, #256]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fa63 	bl	8000f78 <HAL_GetTick>
 8002ab2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe fa5f 	bl	8000f78 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	@ 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e149      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b37      	ldr	r3, [pc, #220]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad4:	4b33      	ldr	r3, [pc, #204]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8082 	beq.w	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d07a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2301      	movs	r3, #1
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	461a      	mov	r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b46:	4a17      	ldr	r2, [pc, #92]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d049      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe fa0f 	bl	8000f78 <HAL_GetTick>
 8002b5a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fa0b 	bl	8000f78 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e0f3      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002b74:	2302      	movs	r3, #2
 8002b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b80:	2302      	movs	r3, #2
 8002b82:	623b      	str	r3, [r7, #32]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002b9e:	4b01      	ldr	r3, [pc, #4]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	e00d      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	10908100 	.word	0x10908100
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	4b69      	ldr	r3, [pc, #420]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	613a      	str	r2, [r7, #16]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	60fa      	str	r2, [r7, #12]
  return result;
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f002 021f 	and.w	r2, r2, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f202 	lsl.w	r2, r1, r2
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0b9      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bea:	4b5e      	ldr	r3, [pc, #376]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	495b      	ldr	r1, [pc, #364]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bfc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b57      	ldr	r3, [pc, #348]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	4a56      	ldr	r2, [pc, #344]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1c:	4b51      	ldr	r3, [pc, #324]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	f023 0203 	bic.w	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494e      	ldr	r1, [pc, #312]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f023 0210 	bic.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4947      	ldr	r1, [pc, #284]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002c58:	4b42      	ldr	r3, [pc, #264]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	493f      	ldr	r1, [pc, #252]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c76:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f023 0220 	bic.w	r2, r3, #32
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	4938      	ldr	r1, [pc, #224]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c94:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c98:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	4930      	ldr	r1, [pc, #192]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d008      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4929      	ldr	r1, [pc, #164]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002cd0:	4b24      	ldr	r3, [pc, #144]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4921      	ldr	r1, [pc, #132]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	491a      	ldr	r1, [pc, #104]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d0c:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	4912      	ldr	r1, [pc, #72]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	490b      	ldr	r1, [pc, #44]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	4903      	ldr	r1, [pc, #12]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3748      	adds	r7, #72	@ 0x48
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e040      	b.n	8002dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd ff60 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	@ 0x24
 8002d94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fcf0 	bl	8003794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fbb7 	bl	8003528 <UART_SetConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e01b      	b.n	8002dfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fd6f 	bl	80038d8 <UART_CheckIdleState>
 8002dfa:	4603      	mov	r3, r0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b08b      	sub	sp, #44	@ 0x2c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d147      	bne.n	8002eaa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_UART_Transmit_IT+0x22>
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e040      	b.n	8002eac <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	@ 0x21
 8002e52:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5c:	d107      	bne.n	8002e6e <HAL_UART_Transmit_IT+0x6a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a13      	ldr	r2, [pc, #76]	@ (8002eb8 <HAL_UART_Transmit_IT+0xb4>)
 8002e6a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002e6c:	e002      	b.n	8002e74 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a12      	ldr	r2, [pc, #72]	@ (8002ebc <HAL_UART_Transmit_IT+0xb8>)
 8002e72:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	613b      	str	r3, [r7, #16]
   return(result);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	69f9      	ldr	r1, [r7, #28]
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e6      	bne.n	8002e74 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	372c      	adds	r7, #44	@ 0x2c
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	08003e3b 	.word	0x08003e3b
 8002ebc:	08003d85 	.word	0x08003d85

08002ec0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	@ 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d132      	bne.n	8002f3e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_UART_Receive_IT+0x24>
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e02b      	b.n	8002f40 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d018      	beq.n	8002f2e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e853 3f00 	ldrex	r3, [r3]
 8002f08:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	69f9      	ldr	r1, [r7, #28]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e6      	bne.n	8002efc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	461a      	mov	r2, r3
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fde5 	bl	8003b04 <UART_Start_Receive_IT>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	e000      	b.n	8002f40 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3728      	adds	r7, #40	@ 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002f72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002f76:	4013      	ands	r3, r2
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d115      	bne.n	8002fb0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 82ab 	beq.w	80034fc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
      }
      return;
 8002fae:	e2a5      	b.n	80034fc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8117 	beq.w	80031e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002fca:	4b85      	ldr	r3, [pc, #532]	@ (80031e0 <HAL_UART_IRQHandler+0x298>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 810a 	beq.w	80031e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d011      	beq.n	8003004 <HAL_UART_IRQHandler+0xbc>
 8002fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d011      	beq.n	8003034 <HAL_UART_IRQHandler+0xec>
 8003010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2202      	movs	r2, #2
 8003022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d011      	beq.n	8003064 <HAL_UART_IRQHandler+0x11c>
 8003040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2204      	movs	r2, #4
 8003052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800307c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003080:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00b      	beq.n	80030a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003096:	f043 0208 	orr.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_UART_IRQHandler+0x18a>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8211 	beq.w	8003500 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800310c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	2b40      	cmp	r3, #64	@ 0x40
 800311c:	d005      	beq.n	800312a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800311e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003122:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04f      	beq.n	80031ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fdb0 	bl	8003c90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313a:	2b40      	cmp	r3, #64	@ 0x40
 800313c:	d141      	bne.n	80031c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3308      	adds	r3, #8
 8003144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800315c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3308      	adds	r3, #8
 8003166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800316a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800316e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1d9      	bne.n	800313e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800318e:	2b00      	cmp	r3, #0
 8003190:	d013      	beq.n	80031ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003196:	4a13      	ldr	r2, [pc, #76]	@ (80031e4 <HAL_UART_IRQHandler+0x29c>)
 8003198:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe f869 	bl	8001276 <HAL_DMA_Abort_IT>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d017      	beq.n	80031da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031b4:	4610      	mov	r0, r2
 80031b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	e00f      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9aa 	bl	8003514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e00b      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9a6 	bl	8003514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	e007      	b.n	80031da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9a2 	bl	8003514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80031d8:	e192      	b.n	8003500 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031da:	bf00      	nop
    return;
 80031dc:	e190      	b.n	8003500 <HAL_UART_IRQHandler+0x5b8>
 80031de:	bf00      	nop
 80031e0:	04000120 	.word	0x04000120
 80031e4:	08003d59 	.word	0x08003d59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f040 814b 	bne.w	8003488 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8144 	beq.w	8003488 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 813d 	beq.w	8003488 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2210      	movs	r2, #16
 8003214:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b40      	cmp	r3, #64	@ 0x40
 8003222:	f040 80b5 	bne.w	8003390 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003232:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 8164 	beq.w	8003504 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003246:	429a      	cmp	r2, r3
 8003248:	f080 815c 	bcs.w	8003504 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003252:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b20      	cmp	r3, #32
 800325e:	f000 8086 	beq.w	800336e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800327a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800327e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800328c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003290:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003298:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800329c:	e841 2300 	strex	r3, r2, [r1]
 80032a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1da      	bne.n	8003262 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e1      	bne.n	80032ac <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3308      	adds	r3, #8
 80032ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032f2:	e853 3f00 	ldrex	r3, [r3]
 80032f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3308      	adds	r3, #8
 8003308:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800330c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800330e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003310:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003312:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003314:	e841 2300 	strex	r3, r2, [r1]
 8003318:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800331a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e3      	bne.n	80032e8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800333c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800333e:	f023 0310 	bic.w	r3, r3, #16
 8003342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003350:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003352:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003358:	e841 2300 	strex	r3, r2, [r1]
 800335c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800335e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e4      	bne.n	800332e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd ff46 	bl	80011fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003380:	b29b      	uxth	r3, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	b29b      	uxth	r3, r3
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fc ff79 	bl	8000280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800338e:	e0b9      	b.n	8003504 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800339c:	b29b      	uxth	r3, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80ab 	beq.w	8003508 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80033b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033de:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e4      	bne.n	80033bc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3308      	adds	r3, #8
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	623b      	str	r3, [r7, #32]
   return(result);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3308      	adds	r3, #8
 8003412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003416:	633a      	str	r2, [r7, #48]	@ 0x30
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800341c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e3      	bne.n	80033f2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	e853 3f00 	ldrex	r3, [r3]
 800344a:	60fb      	str	r3, [r7, #12]
   return(result);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0310 	bic.w	r3, r3, #16
 8003452:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	69b9      	ldr	r1, [r7, #24]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	617b      	str	r3, [r7, #20]
   return(result);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e4      	bne.n	800343e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800347a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7fc fefd 	bl	8000280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003486:	e03f      	b.n	8003508 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800348c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00e      	beq.n	80034b2 <HAL_UART_IRQHandler+0x56a>
 8003494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003498:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80034a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fef7 	bl	800429e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034b0:	e02d      	b.n	800350e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00e      	beq.n	80034dc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d01c      	beq.n	800350c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
    }
    return;
 80034da:	e017      	b.n	800350c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d012      	beq.n	800350e <HAL_UART_IRQHandler+0x5c6>
 80034e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00c      	beq.n	800350e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fd00 	bl	8003efa <UART_EndTransmit_IT>
    return;
 80034fa:	e008      	b.n	800350e <HAL_UART_IRQHandler+0x5c6>
      return;
 80034fc:	bf00      	nop
 80034fe:	e006      	b.n	800350e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003500:	bf00      	nop
 8003502:	e004      	b.n	800350e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003504:	bf00      	nop
 8003506:	e002      	b.n	800350e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <HAL_UART_IRQHandler+0x5c6>
    return;
 800350c:	bf00      	nop
  }

}
 800350e:	37e8      	adds	r7, #232	@ 0xe8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b8a      	ldr	r3, [pc, #552]	@ (800377c <UART_SetConfig+0x254>)
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	430b      	orrs	r3, r1
 800355e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a78      	ldr	r2, [pc, #480]	@ (8003780 <UART_SetConfig+0x258>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d120      	bne.n	80035e6 <UART_SetConfig+0xbe>
 80035a4:	4b77      	ldr	r3, [pc, #476]	@ (8003784 <UART_SetConfig+0x25c>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d817      	bhi.n	80035e0 <UART_SetConfig+0xb8>
 80035b0:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <UART_SetConfig+0x90>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035d5 	.word	0x080035d5
 80035c0:	080035db 	.word	0x080035db
 80035c4:	080035cf 	.word	0x080035cf
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e01d      	b.n	800360a <UART_SetConfig+0xe2>
 80035ce:	2302      	movs	r3, #2
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e01a      	b.n	800360a <UART_SetConfig+0xe2>
 80035d4:	2304      	movs	r3, #4
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e017      	b.n	800360a <UART_SetConfig+0xe2>
 80035da:	2308      	movs	r3, #8
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e014      	b.n	800360a <UART_SetConfig+0xe2>
 80035e0:	2310      	movs	r3, #16
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e011      	b.n	800360a <UART_SetConfig+0xe2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a67      	ldr	r2, [pc, #412]	@ (8003788 <UART_SetConfig+0x260>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d102      	bne.n	80035f6 <UART_SetConfig+0xce>
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e009      	b.n	800360a <UART_SetConfig+0xe2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a64      	ldr	r2, [pc, #400]	@ (800378c <UART_SetConfig+0x264>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d102      	bne.n	8003606 <UART_SetConfig+0xde>
 8003600:	2300      	movs	r3, #0
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e001      	b.n	800360a <UART_SetConfig+0xe2>
 8003606:	2310      	movs	r3, #16
 8003608:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003612:	d15a      	bne.n	80036ca <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003614:	7ffb      	ldrb	r3, [r7, #31]
 8003616:	2b08      	cmp	r3, #8
 8003618:	d827      	bhi.n	800366a <UART_SetConfig+0x142>
 800361a:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <UART_SetConfig+0xf8>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003645 	.word	0x08003645
 8003624:	0800364d 	.word	0x0800364d
 8003628:	08003655 	.word	0x08003655
 800362c:	0800366b 	.word	0x0800366b
 8003630:	0800365b 	.word	0x0800365b
 8003634:	0800366b 	.word	0x0800366b
 8003638:	0800366b 	.word	0x0800366b
 800363c:	0800366b 	.word	0x0800366b
 8003640:	08003663 	.word	0x08003663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003644:	f7ff f9bc 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8003648:	61b8      	str	r0, [r7, #24]
        break;
 800364a:	e013      	b.n	8003674 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800364c:	f7ff f9da 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8003650:	61b8      	str	r0, [r7, #24]
        break;
 8003652:	e00f      	b.n	8003674 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003654:	4b4e      	ldr	r3, [pc, #312]	@ (8003790 <UART_SetConfig+0x268>)
 8003656:	61bb      	str	r3, [r7, #24]
        break;
 8003658:	e00c      	b.n	8003674 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365a:	f7ff f951 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 800365e:	61b8      	str	r0, [r7, #24]
        break;
 8003660:	e008      	b.n	8003674 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003666:	61bb      	str	r3, [r7, #24]
        break;
 8003668:	e004      	b.n	8003674 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	77bb      	strb	r3, [r7, #30]
        break;
 8003672:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d074      	beq.n	8003764 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	005a      	lsls	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	2b0f      	cmp	r3, #15
 8003694:	d916      	bls.n	80036c4 <UART_SetConfig+0x19c>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800369c:	d212      	bcs.n	80036c4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f023 030f 	bic.w	r3, r3, #15
 80036a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	89fb      	ldrh	r3, [r7, #14]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	89fa      	ldrh	r2, [r7, #14]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	e04f      	b.n	8003764 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	77bb      	strb	r3, [r7, #30]
 80036c8:	e04c      	b.n	8003764 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d828      	bhi.n	8003722 <UART_SetConfig+0x1fa>
 80036d0:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <UART_SetConfig+0x1b0>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	08003705 	.word	0x08003705
 80036e0:	0800370d 	.word	0x0800370d
 80036e4:	08003723 	.word	0x08003723
 80036e8:	08003713 	.word	0x08003713
 80036ec:	08003723 	.word	0x08003723
 80036f0:	08003723 	.word	0x08003723
 80036f4:	08003723 	.word	0x08003723
 80036f8:	0800371b 	.word	0x0800371b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036fc:	f7ff f960 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 8003700:	61b8      	str	r0, [r7, #24]
        break;
 8003702:	e013      	b.n	800372c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7ff f97e 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8003708:	61b8      	str	r0, [r7, #24]
        break;
 800370a:	e00f      	b.n	800372c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800370c:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <UART_SetConfig+0x268>)
 800370e:	61bb      	str	r3, [r7, #24]
        break;
 8003710:	e00c      	b.n	800372c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003712:	f7ff f8f5 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003716:	61b8      	str	r0, [r7, #24]
        break;
 8003718:	e008      	b.n	800372c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800371e:	61bb      	str	r3, [r7, #24]
        break;
 8003720:	e004      	b.n	800372c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	77bb      	strb	r3, [r7, #30]
        break;
 800372a:	bf00      	nop
    }

    if (pclk != 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	085a      	lsrs	r2, r3, #1
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	441a      	add	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d909      	bls.n	8003760 <UART_SetConfig+0x238>
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003752:	d205      	bcs.n	8003760 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e001      	b.n	8003764 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003770:	7fbb      	ldrb	r3, [r7, #30]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	efff69f3 	.word	0xefff69f3
 8003780:	40013800 	.word	0x40013800
 8003784:	40021000 	.word	0x40021000
 8003788:	40004400 	.word	0x40004400
 800378c:	40004800 	.word	0x40004800
 8003790:	007a1200 	.word	0x007a1200

08003794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01a      	beq.n	80038aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003892:	d10a      	bne.n	80038aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b098      	sub	sp, #96	@ 0x60
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038e8:	f7fd fb46 	bl	8000f78 <HAL_GetTick>
 80038ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d12e      	bne.n	800395a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f88c 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d021      	beq.n	800395a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800392a:	653b      	str	r3, [r7, #80]	@ 0x50
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003934:	647b      	str	r3, [r7, #68]	@ 0x44
 8003936:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800393a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e6      	bne.n	8003916 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e062      	b.n	8003a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d149      	bne.n	80039fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003968:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003970:	2200      	movs	r2, #0
 8003972:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f856 	bl	8003a28 <UART_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d03c      	beq.n	80039fc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	623b      	str	r3, [r7, #32]
   return(result);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039d4:	61fa      	str	r2, [r7, #28]
 80039d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	69b9      	ldr	r1, [r7, #24]
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	617b      	str	r3, [r7, #20]
   return(result);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e011      	b.n	8003a20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3758      	adds	r7, #88	@ 0x58
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a38:	e04f      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d04b      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fd fa99 	bl	8000f78 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e04e      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d037      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b80      	cmp	r3, #128	@ 0x80
 8003a6e:	d034      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b40      	cmp	r3, #64	@ 0x40
 8003a74:	d031      	beq.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d110      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f8ff 	bl	8003c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2208      	movs	r2, #8
 8003a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e029      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab4:	d111      	bne.n	8003ada <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f8e5 	bl	8003c90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e00f      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d0a0      	beq.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b097      	sub	sp, #92	@ 0x5c
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b36:	d10e      	bne.n	8003b56 <UART_Start_Receive_IT+0x52>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <UART_Start_Receive_IT+0x48>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003b46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b4a:	e02d      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	22ff      	movs	r2, #255	@ 0xff
 8003b50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b54:	e028      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <UART_Start_Receive_IT+0x76>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <UART_Start_Receive_IT+0x6c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	22ff      	movs	r2, #255	@ 0xff
 8003b6a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b6e:	e01b      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	227f      	movs	r2, #127	@ 0x7f
 8003b74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b78:	e016      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b82:	d10d      	bne.n	8003ba0 <UART_Start_Receive_IT+0x9c>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <UART_Start_Receive_IT+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	227f      	movs	r2, #127	@ 0x7f
 8003b90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b94:	e008      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	223f      	movs	r2, #63	@ 0x3f
 8003b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003b9e:	e003      	b.n	8003ba8 <UART_Start_Receive_IT+0xa4>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2222      	movs	r2, #34	@ 0x22
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003bd8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003bda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e5      	bne.n	8003bb8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf4:	d107      	bne.n	8003c06 <UART_Start_Receive_IT+0x102>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a21      	ldr	r2, [pc, #132]	@ (8003c88 <UART_Start_Receive_IT+0x184>)
 8003c02:	669a      	str	r2, [r3, #104]	@ 0x68
 8003c04:	e002      	b.n	8003c0c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a20      	ldr	r2, [pc, #128]	@ (8003c8c <UART_Start_Receive_IT+0x188>)
 8003c0a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d019      	beq.n	8003c48 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c34:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e6      	bne.n	8003c14 <UART_Start_Receive_IT+0x110>
 8003c46:	e018      	b.n	8003c7a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	6a3a      	ldr	r2, [r7, #32]
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e6      	bne.n	8003c48 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	375c      	adds	r7, #92	@ 0x5c
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	080040f7 	.word	0x080040f7
 8003c8c:	08003f4f 	.word	0x08003f4f

08003c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b095      	sub	sp, #84	@ 0x54
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	e853 3f00 	ldrex	r3, [r3]
 8003ca4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e6      	bne.n	8003c98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d118      	bne.n	8003d38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f023 0310 	bic.w	r3, r3, #16
 8003d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	6979      	ldr	r1, [r7, #20]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e6      	bne.n	8003d06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d4c:	bf00      	nop
 8003d4e:	3754      	adds	r7, #84	@ 0x54
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f7ff fbcc 	bl	8003514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b08f      	sub	sp, #60	@ 0x3c
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d90:	2b21      	cmp	r3, #33	@ 0x21
 8003d92:	d14c      	bne.n	8003e2e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d132      	bne.n	8003e06 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dc0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e6      	bne.n	8003da0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e6      	bne.n	8003dd2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003e04:	e013      	b.n	8003e2e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003e2e:	bf00      	nop
 8003e30:	373c      	adds	r7, #60	@ 0x3c
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b091      	sub	sp, #68	@ 0x44
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e46:	2b21      	cmp	r3, #33	@ 0x21
 8003e48:	d151      	bne.n	8003eee <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d132      	bne.n	8003ebc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	623b      	str	r3, [r7, #32]
   return(result);
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e6      	bne.n	8003e56 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	69b9      	ldr	r1, [r7, #24]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e6      	bne.n	8003e88 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003eba:	e018      	b.n	8003eee <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec4:	881a      	ldrh	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ece:	b292      	uxth	r2, r2
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003eee:	bf00      	nop
 8003ef0:	3744      	adds	r7, #68	@ 0x44
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b088      	sub	sp, #32
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	61bb      	str	r3, [r7, #24]
 8003f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6979      	ldr	r1, [r7, #20]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e6      	bne.n	8003f02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fc f9c9 	bl	80002d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f46:	bf00      	nop
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b09c      	sub	sp, #112	@ 0x70
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f5c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f66:	2b22      	cmp	r3, #34	@ 0x22
 8003f68:	f040 80b9 	bne.w	80040de <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f72:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003f7a:	b2d9      	uxtb	r1, r3
 8003f7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f86:	400a      	ands	r2, r1
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 809c 	bne.w	80040ee <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004008:	647a      	str	r2, [r7, #68]	@ 0x44
 800400a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800400e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	623b      	str	r3, [r7, #32]
   return(result);
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004052:	663b      	str	r3, [r7, #96]	@ 0x60
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800405c:	633b      	str	r3, [r7, #48]	@ 0x30
 800405e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	2b01      	cmp	r3, #1
 8004076:	d12e      	bne.n	80040d6 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	60fb      	str	r3, [r7, #12]
   return(result);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	617b      	str	r3, [r7, #20]
   return(result);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e6      	bne.n	800407e <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d103      	bne.n	80040c6 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2210      	movs	r2, #16
 80040c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc f8d6 	bl	8000280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d4:	e00b      	b.n	80040ee <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc f930 	bl	800033c <HAL_UART_RxCpltCallback>
}
 80040dc:	e007      	b.n	80040ee <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0208 	orr.w	r2, r2, #8
 80040ec:	619a      	str	r2, [r3, #24]
}
 80040ee:	bf00      	nop
 80040f0:	3770      	adds	r7, #112	@ 0x70
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b09c      	sub	sp, #112	@ 0x70
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004104:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800410e:	2b22      	cmp	r3, #34	@ 0x22
 8004110:	f040 80b9 	bne.w	8004286 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800411a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004122:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004124:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004128:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800412c:	4013      	ands	r3, r2
 800412e:	b29a      	uxth	r2, r3
 8004130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004132:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	f040 809c 	bne.w	8004296 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800416c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800416e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004172:	667b      	str	r3, [r7, #100]	@ 0x64
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800417c:	657b      	str	r3, [r7, #84]	@ 0x54
 800417e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004182:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800418a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e6      	bne.n	800415e <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80041b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d018      	beq.n	8004218 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004206:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800420a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e6      	bne.n	80041e6 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421c:	2b01      	cmp	r3, #1
 800421e:	d12e      	bne.n	800427e <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	60bb      	str	r3, [r7, #8]
   return(result);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f023 0310 	bic.w	r3, r3, #16
 800423a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	613b      	str	r3, [r7, #16]
   return(result);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b10      	cmp	r3, #16
 8004264:	d103      	bne.n	800426e <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2210      	movs	r2, #16
 800426c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc f802 	bl	8000280 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800427c:	e00b      	b.n	8004296 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fc f85c 	bl	800033c <HAL_UART_RxCpltCallback>
}
 8004284:	e007      	b.n	8004296 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0208 	orr.w	r2, r2, #8
 8004294:	619a      	str	r2, [r3, #24]
}
 8004296:	bf00      	nop
 8004298:	3770      	adds	r7, #112	@ 0x70
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b08c      	sub	sp, #48	@ 0x30
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	4613      	mov	r3, r2
 80042be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d13b      	bne.n	8004348 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e034      	b.n	800434a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	461a      	mov	r2, r3
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fc06 	bl	8003b04 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d11d      	bne.n	800433c <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2210      	movs	r2, #16
 8004306:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	617b      	str	r3, [r7, #20]
   return(result);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f043 0310 	orr.w	r3, r3, #16
 800431c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
 8004328:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6a39      	ldr	r1, [r7, #32]
 800432c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	61fb      	str	r3, [r7, #28]
   return(result);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e6      	bne.n	8004308 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800433a:	e002      	b.n	8004342 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8004342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004346:	e000      	b.n	800434a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3730      	adds	r7, #48	@ 0x30
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <atoi>:
 8004352:	220a      	movs	r2, #10
 8004354:	2100      	movs	r1, #0
 8004356:	f000 b93b 	b.w	80045d0 <strtol>
	...

0800435c <malloc>:
 800435c:	4b02      	ldr	r3, [pc, #8]	@ (8004368 <malloc+0xc>)
 800435e:	4601      	mov	r1, r0
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f000 b82d 	b.w	80043c0 <_malloc_r>
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c

0800436c <free>:
 800436c:	4b02      	ldr	r3, [pc, #8]	@ (8004378 <free+0xc>)
 800436e:	4601      	mov	r1, r0
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	f000 b9f5 	b.w	8004760 <_free_r>
 8004376:	bf00      	nop
 8004378:	2000000c 	.word	0x2000000c

0800437c <sbrk_aligned>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4e0f      	ldr	r6, [pc, #60]	@ (80043bc <sbrk_aligned+0x40>)
 8004380:	460c      	mov	r4, r1
 8004382:	6831      	ldr	r1, [r6, #0]
 8004384:	4605      	mov	r5, r0
 8004386:	b911      	cbnz	r1, 800438e <sbrk_aligned+0x12>
 8004388:	f000 f998 	bl	80046bc <_sbrk_r>
 800438c:	6030      	str	r0, [r6, #0]
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f000 f993 	bl	80046bc <_sbrk_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d103      	bne.n	80043a2 <sbrk_aligned+0x26>
 800439a:	f04f 34ff 	mov.w	r4, #4294967295
 800439e:	4620      	mov	r0, r4
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	1cc4      	adds	r4, r0, #3
 80043a4:	f024 0403 	bic.w	r4, r4, #3
 80043a8:	42a0      	cmp	r0, r4
 80043aa:	d0f8      	beq.n	800439e <sbrk_aligned+0x22>
 80043ac:	1a21      	subs	r1, r4, r0
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 f984 	bl	80046bc <_sbrk_r>
 80043b4:	3001      	adds	r0, #1
 80043b6:	d1f2      	bne.n	800439e <sbrk_aligned+0x22>
 80043b8:	e7ef      	b.n	800439a <sbrk_aligned+0x1e>
 80043ba:	bf00      	nop
 80043bc:	20000284 	.word	0x20000284

080043c0 <_malloc_r>:
 80043c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043c4:	1ccd      	adds	r5, r1, #3
 80043c6:	f025 0503 	bic.w	r5, r5, #3
 80043ca:	3508      	adds	r5, #8
 80043cc:	2d0c      	cmp	r5, #12
 80043ce:	bf38      	it	cc
 80043d0:	250c      	movcc	r5, #12
 80043d2:	2d00      	cmp	r5, #0
 80043d4:	4606      	mov	r6, r0
 80043d6:	db01      	blt.n	80043dc <_malloc_r+0x1c>
 80043d8:	42a9      	cmp	r1, r5
 80043da:	d904      	bls.n	80043e6 <_malloc_r+0x26>
 80043dc:	230c      	movs	r3, #12
 80043de:	6033      	str	r3, [r6, #0]
 80043e0:	2000      	movs	r0, #0
 80043e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044bc <_malloc_r+0xfc>
 80043ea:	f000 f869 	bl	80044c0 <__malloc_lock>
 80043ee:	f8d8 3000 	ldr.w	r3, [r8]
 80043f2:	461c      	mov	r4, r3
 80043f4:	bb44      	cbnz	r4, 8004448 <_malloc_r+0x88>
 80043f6:	4629      	mov	r1, r5
 80043f8:	4630      	mov	r0, r6
 80043fa:	f7ff ffbf 	bl	800437c <sbrk_aligned>
 80043fe:	1c43      	adds	r3, r0, #1
 8004400:	4604      	mov	r4, r0
 8004402:	d158      	bne.n	80044b6 <_malloc_r+0xf6>
 8004404:	f8d8 4000 	ldr.w	r4, [r8]
 8004408:	4627      	mov	r7, r4
 800440a:	2f00      	cmp	r7, #0
 800440c:	d143      	bne.n	8004496 <_malloc_r+0xd6>
 800440e:	2c00      	cmp	r4, #0
 8004410:	d04b      	beq.n	80044aa <_malloc_r+0xea>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	4639      	mov	r1, r7
 8004416:	4630      	mov	r0, r6
 8004418:	eb04 0903 	add.w	r9, r4, r3
 800441c:	f000 f94e 	bl	80046bc <_sbrk_r>
 8004420:	4581      	cmp	r9, r0
 8004422:	d142      	bne.n	80044aa <_malloc_r+0xea>
 8004424:	6821      	ldr	r1, [r4, #0]
 8004426:	1a6d      	subs	r5, r5, r1
 8004428:	4629      	mov	r1, r5
 800442a:	4630      	mov	r0, r6
 800442c:	f7ff ffa6 	bl	800437c <sbrk_aligned>
 8004430:	3001      	adds	r0, #1
 8004432:	d03a      	beq.n	80044aa <_malloc_r+0xea>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	442b      	add	r3, r5
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	f8d8 3000 	ldr.w	r3, [r8]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	bb62      	cbnz	r2, 800449c <_malloc_r+0xdc>
 8004442:	f8c8 7000 	str.w	r7, [r8]
 8004446:	e00f      	b.n	8004468 <_malloc_r+0xa8>
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	1b52      	subs	r2, r2, r5
 800444c:	d420      	bmi.n	8004490 <_malloc_r+0xd0>
 800444e:	2a0b      	cmp	r2, #11
 8004450:	d917      	bls.n	8004482 <_malloc_r+0xc2>
 8004452:	1961      	adds	r1, r4, r5
 8004454:	42a3      	cmp	r3, r4
 8004456:	6025      	str	r5, [r4, #0]
 8004458:	bf18      	it	ne
 800445a:	6059      	strne	r1, [r3, #4]
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	bf08      	it	eq
 8004460:	f8c8 1000 	streq.w	r1, [r8]
 8004464:	5162      	str	r2, [r4, r5]
 8004466:	604b      	str	r3, [r1, #4]
 8004468:	4630      	mov	r0, r6
 800446a:	f000 f82f 	bl	80044cc <__malloc_unlock>
 800446e:	f104 000b 	add.w	r0, r4, #11
 8004472:	1d23      	adds	r3, r4, #4
 8004474:	f020 0007 	bic.w	r0, r0, #7
 8004478:	1ac2      	subs	r2, r0, r3
 800447a:	bf1c      	itt	ne
 800447c:	1a1b      	subne	r3, r3, r0
 800447e:	50a3      	strne	r3, [r4, r2]
 8004480:	e7af      	b.n	80043e2 <_malloc_r+0x22>
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	42a3      	cmp	r3, r4
 8004486:	bf0c      	ite	eq
 8004488:	f8c8 2000 	streq.w	r2, [r8]
 800448c:	605a      	strne	r2, [r3, #4]
 800448e:	e7eb      	b.n	8004468 <_malloc_r+0xa8>
 8004490:	4623      	mov	r3, r4
 8004492:	6864      	ldr	r4, [r4, #4]
 8004494:	e7ae      	b.n	80043f4 <_malloc_r+0x34>
 8004496:	463c      	mov	r4, r7
 8004498:	687f      	ldr	r7, [r7, #4]
 800449a:	e7b6      	b.n	800440a <_malloc_r+0x4a>
 800449c:	461a      	mov	r2, r3
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d1fb      	bne.n	800449c <_malloc_r+0xdc>
 80044a4:	2300      	movs	r3, #0
 80044a6:	6053      	str	r3, [r2, #4]
 80044a8:	e7de      	b.n	8004468 <_malloc_r+0xa8>
 80044aa:	230c      	movs	r3, #12
 80044ac:	6033      	str	r3, [r6, #0]
 80044ae:	4630      	mov	r0, r6
 80044b0:	f000 f80c 	bl	80044cc <__malloc_unlock>
 80044b4:	e794      	b.n	80043e0 <_malloc_r+0x20>
 80044b6:	6005      	str	r5, [r0, #0]
 80044b8:	e7d6      	b.n	8004468 <_malloc_r+0xa8>
 80044ba:	bf00      	nop
 80044bc:	20000288 	.word	0x20000288

080044c0 <__malloc_lock>:
 80044c0:	4801      	ldr	r0, [pc, #4]	@ (80044c8 <__malloc_lock+0x8>)
 80044c2:	f000 b935 	b.w	8004730 <__retarget_lock_acquire_recursive>
 80044c6:	bf00      	nop
 80044c8:	200003c8 	.word	0x200003c8

080044cc <__malloc_unlock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	@ (80044d4 <__malloc_unlock+0x8>)
 80044ce:	f000 b930 	b.w	8004732 <__retarget_lock_release_recursive>
 80044d2:	bf00      	nop
 80044d4:	200003c8 	.word	0x200003c8

080044d8 <_strtol_l.isra.0>:
 80044d8:	2b24      	cmp	r3, #36	@ 0x24
 80044da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044de:	4686      	mov	lr, r0
 80044e0:	4690      	mov	r8, r2
 80044e2:	d801      	bhi.n	80044e8 <_strtol_l.isra.0+0x10>
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <_strtol_l.isra.0+0x1e>
 80044e8:	f000 f8f8 	bl	80046dc <__errno>
 80044ec:	2316      	movs	r3, #22
 80044ee:	6003      	str	r3, [r0, #0]
 80044f0:	2000      	movs	r0, #0
 80044f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f6:	4834      	ldr	r0, [pc, #208]	@ (80045c8 <_strtol_l.isra.0+0xf0>)
 80044f8:	460d      	mov	r5, r1
 80044fa:	462a      	mov	r2, r5
 80044fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004500:	5d06      	ldrb	r6, [r0, r4]
 8004502:	f016 0608 	ands.w	r6, r6, #8
 8004506:	d1f8      	bne.n	80044fa <_strtol_l.isra.0+0x22>
 8004508:	2c2d      	cmp	r4, #45	@ 0x2d
 800450a:	d110      	bne.n	800452e <_strtol_l.isra.0+0x56>
 800450c:	782c      	ldrb	r4, [r5, #0]
 800450e:	2601      	movs	r6, #1
 8004510:	1c95      	adds	r5, r2, #2
 8004512:	f033 0210 	bics.w	r2, r3, #16
 8004516:	d115      	bne.n	8004544 <_strtol_l.isra.0+0x6c>
 8004518:	2c30      	cmp	r4, #48	@ 0x30
 800451a:	d10d      	bne.n	8004538 <_strtol_l.isra.0+0x60>
 800451c:	782a      	ldrb	r2, [r5, #0]
 800451e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004522:	2a58      	cmp	r2, #88	@ 0x58
 8004524:	d108      	bne.n	8004538 <_strtol_l.isra.0+0x60>
 8004526:	786c      	ldrb	r4, [r5, #1]
 8004528:	3502      	adds	r5, #2
 800452a:	2310      	movs	r3, #16
 800452c:	e00a      	b.n	8004544 <_strtol_l.isra.0+0x6c>
 800452e:	2c2b      	cmp	r4, #43	@ 0x2b
 8004530:	bf04      	itt	eq
 8004532:	782c      	ldrbeq	r4, [r5, #0]
 8004534:	1c95      	addeq	r5, r2, #2
 8004536:	e7ec      	b.n	8004512 <_strtol_l.isra.0+0x3a>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f6      	bne.n	800452a <_strtol_l.isra.0+0x52>
 800453c:	2c30      	cmp	r4, #48	@ 0x30
 800453e:	bf14      	ite	ne
 8004540:	230a      	movne	r3, #10
 8004542:	2308      	moveq	r3, #8
 8004544:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004548:	f10c 3cff 	add.w	ip, ip, #4294967295
 800454c:	2200      	movs	r2, #0
 800454e:	fbbc f9f3 	udiv	r9, ip, r3
 8004552:	4610      	mov	r0, r2
 8004554:	fb03 ca19 	mls	sl, r3, r9, ip
 8004558:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800455c:	2f09      	cmp	r7, #9
 800455e:	d80f      	bhi.n	8004580 <_strtol_l.isra.0+0xa8>
 8004560:	463c      	mov	r4, r7
 8004562:	42a3      	cmp	r3, r4
 8004564:	dd1b      	ble.n	800459e <_strtol_l.isra.0+0xc6>
 8004566:	1c57      	adds	r7, r2, #1
 8004568:	d007      	beq.n	800457a <_strtol_l.isra.0+0xa2>
 800456a:	4581      	cmp	r9, r0
 800456c:	d314      	bcc.n	8004598 <_strtol_l.isra.0+0xc0>
 800456e:	d101      	bne.n	8004574 <_strtol_l.isra.0+0x9c>
 8004570:	45a2      	cmp	sl, r4
 8004572:	db11      	blt.n	8004598 <_strtol_l.isra.0+0xc0>
 8004574:	fb00 4003 	mla	r0, r0, r3, r4
 8004578:	2201      	movs	r2, #1
 800457a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800457e:	e7eb      	b.n	8004558 <_strtol_l.isra.0+0x80>
 8004580:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004584:	2f19      	cmp	r7, #25
 8004586:	d801      	bhi.n	800458c <_strtol_l.isra.0+0xb4>
 8004588:	3c37      	subs	r4, #55	@ 0x37
 800458a:	e7ea      	b.n	8004562 <_strtol_l.isra.0+0x8a>
 800458c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004590:	2f19      	cmp	r7, #25
 8004592:	d804      	bhi.n	800459e <_strtol_l.isra.0+0xc6>
 8004594:	3c57      	subs	r4, #87	@ 0x57
 8004596:	e7e4      	b.n	8004562 <_strtol_l.isra.0+0x8a>
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	e7ed      	b.n	800457a <_strtol_l.isra.0+0xa2>
 800459e:	1c53      	adds	r3, r2, #1
 80045a0:	d108      	bne.n	80045b4 <_strtol_l.isra.0+0xdc>
 80045a2:	2322      	movs	r3, #34	@ 0x22
 80045a4:	f8ce 3000 	str.w	r3, [lr]
 80045a8:	4660      	mov	r0, ip
 80045aa:	f1b8 0f00 	cmp.w	r8, #0
 80045ae:	d0a0      	beq.n	80044f2 <_strtol_l.isra.0+0x1a>
 80045b0:	1e69      	subs	r1, r5, #1
 80045b2:	e006      	b.n	80045c2 <_strtol_l.isra.0+0xea>
 80045b4:	b106      	cbz	r6, 80045b8 <_strtol_l.isra.0+0xe0>
 80045b6:	4240      	negs	r0, r0
 80045b8:	f1b8 0f00 	cmp.w	r8, #0
 80045bc:	d099      	beq.n	80044f2 <_strtol_l.isra.0+0x1a>
 80045be:	2a00      	cmp	r2, #0
 80045c0:	d1f6      	bne.n	80045b0 <_strtol_l.isra.0+0xd8>
 80045c2:	f8c8 1000 	str.w	r1, [r8]
 80045c6:	e794      	b.n	80044f2 <_strtol_l.isra.0+0x1a>
 80045c8:	08005725 	.word	0x08005725

080045cc <_strtol_r>:
 80045cc:	f7ff bf84 	b.w	80044d8 <_strtol_l.isra.0>

080045d0 <strtol>:
 80045d0:	4613      	mov	r3, r2
 80045d2:	460a      	mov	r2, r1
 80045d4:	4601      	mov	r1, r0
 80045d6:	4802      	ldr	r0, [pc, #8]	@ (80045e0 <strtol+0x10>)
 80045d8:	6800      	ldr	r0, [r0, #0]
 80045da:	f7ff bf7d 	b.w	80044d8 <_strtol_l.isra.0>
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <siprintf>:
 80045e4:	b40e      	push	{r1, r2, r3}
 80045e6:	b510      	push	{r4, lr}
 80045e8:	b09d      	sub	sp, #116	@ 0x74
 80045ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80045ec:	9002      	str	r0, [sp, #8]
 80045ee:	9006      	str	r0, [sp, #24]
 80045f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045f4:	480a      	ldr	r0, [pc, #40]	@ (8004620 <siprintf+0x3c>)
 80045f6:	9107      	str	r1, [sp, #28]
 80045f8:	9104      	str	r1, [sp, #16]
 80045fa:	490a      	ldr	r1, [pc, #40]	@ (8004624 <siprintf+0x40>)
 80045fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004600:	9105      	str	r1, [sp, #20]
 8004602:	2400      	movs	r4, #0
 8004604:	a902      	add	r1, sp, #8
 8004606:	6800      	ldr	r0, [r0, #0]
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800460c:	f000 f94e 	bl	80048ac <_svfiprintf_r>
 8004610:	9b02      	ldr	r3, [sp, #8]
 8004612:	701c      	strb	r4, [r3, #0]
 8004614:	b01d      	add	sp, #116	@ 0x74
 8004616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800461a:	b003      	add	sp, #12
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	2000000c 	.word	0x2000000c
 8004624:	ffff0208 	.word	0xffff0208

08004628 <siscanf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	b570      	push	{r4, r5, r6, lr}
 800462c:	b09d      	sub	sp, #116	@ 0x74
 800462e:	ac21      	add	r4, sp, #132	@ 0x84
 8004630:	2500      	movs	r5, #0
 8004632:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004636:	f854 6b04 	ldr.w	r6, [r4], #4
 800463a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800463e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8004640:	9002      	str	r0, [sp, #8]
 8004642:	9006      	str	r0, [sp, #24]
 8004644:	f7fb fdc4 	bl	80001d0 <strlen>
 8004648:	4b0b      	ldr	r3, [pc, #44]	@ (8004678 <siscanf+0x50>)
 800464a:	9003      	str	r0, [sp, #12]
 800464c:	9007      	str	r0, [sp, #28]
 800464e:	480b      	ldr	r0, [pc, #44]	@ (800467c <siscanf+0x54>)
 8004650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004656:	f8ad 3016 	strh.w	r3, [sp, #22]
 800465a:	4632      	mov	r2, r6
 800465c:	4623      	mov	r3, r4
 800465e:	a902      	add	r1, sp, #8
 8004660:	6800      	ldr	r0, [r0, #0]
 8004662:	950f      	str	r5, [sp, #60]	@ 0x3c
 8004664:	9514      	str	r5, [sp, #80]	@ 0x50
 8004666:	9401      	str	r4, [sp, #4]
 8004668:	f000 fa76 	bl	8004b58 <__ssvfiscanf_r>
 800466c:	b01d      	add	sp, #116	@ 0x74
 800466e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004672:	b003      	add	sp, #12
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	08004681 	.word	0x08004681
 800467c:	2000000c 	.word	0x2000000c

08004680 <__seofread>:
 8004680:	2000      	movs	r0, #0
 8004682:	4770      	bx	lr

08004684 <memset>:
 8004684:	4402      	add	r2, r0
 8004686:	4603      	mov	r3, r0
 8004688:	4293      	cmp	r3, r2
 800468a:	d100      	bne.n	800468e <memset+0xa>
 800468c:	4770      	bx	lr
 800468e:	f803 1b01 	strb.w	r1, [r3], #1
 8004692:	e7f9      	b.n	8004688 <memset+0x4>

08004694 <strncpy>:
 8004694:	b510      	push	{r4, lr}
 8004696:	3901      	subs	r1, #1
 8004698:	4603      	mov	r3, r0
 800469a:	b132      	cbz	r2, 80046aa <strncpy+0x16>
 800469c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80046a0:	f803 4b01 	strb.w	r4, [r3], #1
 80046a4:	3a01      	subs	r2, #1
 80046a6:	2c00      	cmp	r4, #0
 80046a8:	d1f7      	bne.n	800469a <strncpy+0x6>
 80046aa:	441a      	add	r2, r3
 80046ac:	2100      	movs	r1, #0
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d100      	bne.n	80046b4 <strncpy+0x20>
 80046b2:	bd10      	pop	{r4, pc}
 80046b4:	f803 1b01 	strb.w	r1, [r3], #1
 80046b8:	e7f9      	b.n	80046ae <strncpy+0x1a>
	...

080046bc <_sbrk_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d06      	ldr	r5, [pc, #24]	@ (80046d8 <_sbrk_r+0x1c>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc fb8a 	bl	8000de0 <_sbrk>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_sbrk_r+0x1a>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_sbrk_r+0x1a>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	200003c4 	.word	0x200003c4

080046dc <__errno>:
 80046dc:	4b01      	ldr	r3, [pc, #4]	@ (80046e4 <__errno+0x8>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004720 <__libc_init_array+0x38>)
 80046ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004724 <__libc_init_array+0x3c>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	2600      	movs	r6, #0
 80046f4:	42a6      	cmp	r6, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004728 <__libc_init_array+0x40>)
 80046fa:	4c0c      	ldr	r4, [pc, #48]	@ (800472c <__libc_init_array+0x44>)
 80046fc:	f000 ffb0 	bl	8005660 <_init>
 8004700:	1b64      	subs	r4, r4, r5
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	2600      	movs	r6, #0
 8004706:	42a6      	cmp	r6, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004710:	4798      	blx	r3
 8004712:	3601      	adds	r6, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f855 3b04 	ldr.w	r3, [r5], #4
 800471a:	4798      	blx	r3
 800471c:	3601      	adds	r6, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	0800587c 	.word	0x0800587c
 8004724:	0800587c 	.word	0x0800587c
 8004728:	0800587c 	.word	0x0800587c
 800472c:	08005880 	.word	0x08005880

08004730 <__retarget_lock_acquire_recursive>:
 8004730:	4770      	bx	lr

08004732 <__retarget_lock_release_recursive>:
 8004732:	4770      	bx	lr

08004734 <strcpy>:
 8004734:	4603      	mov	r3, r0
 8004736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800473a:	f803 2b01 	strb.w	r2, [r3], #1
 800473e:	2a00      	cmp	r2, #0
 8004740:	d1f9      	bne.n	8004736 <strcpy+0x2>
 8004742:	4770      	bx	lr

08004744 <memcpy>:
 8004744:	440a      	add	r2, r1
 8004746:	4291      	cmp	r1, r2
 8004748:	f100 33ff 	add.w	r3, r0, #4294967295
 800474c:	d100      	bne.n	8004750 <memcpy+0xc>
 800474e:	4770      	bx	lr
 8004750:	b510      	push	{r4, lr}
 8004752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800475a:	4291      	cmp	r1, r2
 800475c:	d1f9      	bne.n	8004752 <memcpy+0xe>
 800475e:	bd10      	pop	{r4, pc}

08004760 <_free_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4605      	mov	r5, r0
 8004764:	2900      	cmp	r1, #0
 8004766:	d041      	beq.n	80047ec <_free_r+0x8c>
 8004768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800476c:	1f0c      	subs	r4, r1, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	bfb8      	it	lt
 8004772:	18e4      	addlt	r4, r4, r3
 8004774:	f7ff fea4 	bl	80044c0 <__malloc_lock>
 8004778:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <_free_r+0x90>)
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	b933      	cbnz	r3, 800478c <_free_r+0x2c>
 800477e:	6063      	str	r3, [r4, #4]
 8004780:	6014      	str	r4, [r2, #0]
 8004782:	4628      	mov	r0, r5
 8004784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004788:	f7ff bea0 	b.w	80044cc <__malloc_unlock>
 800478c:	42a3      	cmp	r3, r4
 800478e:	d908      	bls.n	80047a2 <_free_r+0x42>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	1821      	adds	r1, r4, r0
 8004794:	428b      	cmp	r3, r1
 8004796:	bf01      	itttt	eq
 8004798:	6819      	ldreq	r1, [r3, #0]
 800479a:	685b      	ldreq	r3, [r3, #4]
 800479c:	1809      	addeq	r1, r1, r0
 800479e:	6021      	streq	r1, [r4, #0]
 80047a0:	e7ed      	b.n	800477e <_free_r+0x1e>
 80047a2:	461a      	mov	r2, r3
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	b10b      	cbz	r3, 80047ac <_free_r+0x4c>
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	d9fa      	bls.n	80047a2 <_free_r+0x42>
 80047ac:	6811      	ldr	r1, [r2, #0]
 80047ae:	1850      	adds	r0, r2, r1
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d10b      	bne.n	80047cc <_free_r+0x6c>
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	4401      	add	r1, r0
 80047b8:	1850      	adds	r0, r2, r1
 80047ba:	4283      	cmp	r3, r0
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	d1e0      	bne.n	8004782 <_free_r+0x22>
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	6053      	str	r3, [r2, #4]
 80047c6:	4408      	add	r0, r1
 80047c8:	6010      	str	r0, [r2, #0]
 80047ca:	e7da      	b.n	8004782 <_free_r+0x22>
 80047cc:	d902      	bls.n	80047d4 <_free_r+0x74>
 80047ce:	230c      	movs	r3, #12
 80047d0:	602b      	str	r3, [r5, #0]
 80047d2:	e7d6      	b.n	8004782 <_free_r+0x22>
 80047d4:	6820      	ldr	r0, [r4, #0]
 80047d6:	1821      	adds	r1, r4, r0
 80047d8:	428b      	cmp	r3, r1
 80047da:	bf04      	itt	eq
 80047dc:	6819      	ldreq	r1, [r3, #0]
 80047de:	685b      	ldreq	r3, [r3, #4]
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	bf04      	itt	eq
 80047e4:	1809      	addeq	r1, r1, r0
 80047e6:	6021      	streq	r1, [r4, #0]
 80047e8:	6054      	str	r4, [r2, #4]
 80047ea:	e7ca      	b.n	8004782 <_free_r+0x22>
 80047ec:	bd38      	pop	{r3, r4, r5, pc}
 80047ee:	bf00      	nop
 80047f0:	20000288 	.word	0x20000288

080047f4 <__ssputs_r>:
 80047f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f8:	688e      	ldr	r6, [r1, #8]
 80047fa:	461f      	mov	r7, r3
 80047fc:	42be      	cmp	r6, r7
 80047fe:	680b      	ldr	r3, [r1, #0]
 8004800:	4682      	mov	sl, r0
 8004802:	460c      	mov	r4, r1
 8004804:	4690      	mov	r8, r2
 8004806:	d82d      	bhi.n	8004864 <__ssputs_r+0x70>
 8004808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800480c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004810:	d026      	beq.n	8004860 <__ssputs_r+0x6c>
 8004812:	6965      	ldr	r5, [r4, #20]
 8004814:	6909      	ldr	r1, [r1, #16]
 8004816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800481a:	eba3 0901 	sub.w	r9, r3, r1
 800481e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004822:	1c7b      	adds	r3, r7, #1
 8004824:	444b      	add	r3, r9
 8004826:	106d      	asrs	r5, r5, #1
 8004828:	429d      	cmp	r5, r3
 800482a:	bf38      	it	cc
 800482c:	461d      	movcc	r5, r3
 800482e:	0553      	lsls	r3, r2, #21
 8004830:	d527      	bpl.n	8004882 <__ssputs_r+0x8e>
 8004832:	4629      	mov	r1, r5
 8004834:	f7ff fdc4 	bl	80043c0 <_malloc_r>
 8004838:	4606      	mov	r6, r0
 800483a:	b360      	cbz	r0, 8004896 <__ssputs_r+0xa2>
 800483c:	6921      	ldr	r1, [r4, #16]
 800483e:	464a      	mov	r2, r9
 8004840:	f7ff ff80 	bl	8004744 <memcpy>
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800484a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	6126      	str	r6, [r4, #16]
 8004852:	6165      	str	r5, [r4, #20]
 8004854:	444e      	add	r6, r9
 8004856:	eba5 0509 	sub.w	r5, r5, r9
 800485a:	6026      	str	r6, [r4, #0]
 800485c:	60a5      	str	r5, [r4, #8]
 800485e:	463e      	mov	r6, r7
 8004860:	42be      	cmp	r6, r7
 8004862:	d900      	bls.n	8004866 <__ssputs_r+0x72>
 8004864:	463e      	mov	r6, r7
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	4632      	mov	r2, r6
 800486a:	4641      	mov	r1, r8
 800486c:	f000 fe37 	bl	80054de <memmove>
 8004870:	68a3      	ldr	r3, [r4, #8]
 8004872:	1b9b      	subs	r3, r3, r6
 8004874:	60a3      	str	r3, [r4, #8]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	4433      	add	r3, r6
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	2000      	movs	r0, #0
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	462a      	mov	r2, r5
 8004884:	f000 fe45 	bl	8005512 <_realloc_r>
 8004888:	4606      	mov	r6, r0
 800488a:	2800      	cmp	r0, #0
 800488c:	d1e0      	bne.n	8004850 <__ssputs_r+0x5c>
 800488e:	6921      	ldr	r1, [r4, #16]
 8004890:	4650      	mov	r0, sl
 8004892:	f7ff ff65 	bl	8004760 <_free_r>
 8004896:	230c      	movs	r3, #12
 8004898:	f8ca 3000 	str.w	r3, [sl]
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	e7e9      	b.n	800487e <__ssputs_r+0x8a>
	...

080048ac <_svfiprintf_r>:
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	4698      	mov	r8, r3
 80048b2:	898b      	ldrh	r3, [r1, #12]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	b09d      	sub	sp, #116	@ 0x74
 80048b8:	4607      	mov	r7, r0
 80048ba:	460d      	mov	r5, r1
 80048bc:	4614      	mov	r4, r2
 80048be:	d510      	bpl.n	80048e2 <_svfiprintf_r+0x36>
 80048c0:	690b      	ldr	r3, [r1, #16]
 80048c2:	b973      	cbnz	r3, 80048e2 <_svfiprintf_r+0x36>
 80048c4:	2140      	movs	r1, #64	@ 0x40
 80048c6:	f7ff fd7b 	bl	80043c0 <_malloc_r>
 80048ca:	6028      	str	r0, [r5, #0]
 80048cc:	6128      	str	r0, [r5, #16]
 80048ce:	b930      	cbnz	r0, 80048de <_svfiprintf_r+0x32>
 80048d0:	230c      	movs	r3, #12
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	b01d      	add	sp, #116	@ 0x74
 80048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048de:	2340      	movs	r3, #64	@ 0x40
 80048e0:	616b      	str	r3, [r5, #20]
 80048e2:	2300      	movs	r3, #0
 80048e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048e6:	2320      	movs	r3, #32
 80048e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f0:	2330      	movs	r3, #48	@ 0x30
 80048f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a90 <_svfiprintf_r+0x1e4>
 80048f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048fa:	f04f 0901 	mov.w	r9, #1
 80048fe:	4623      	mov	r3, r4
 8004900:	469a      	mov	sl, r3
 8004902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004906:	b10a      	cbz	r2, 800490c <_svfiprintf_r+0x60>
 8004908:	2a25      	cmp	r2, #37	@ 0x25
 800490a:	d1f9      	bne.n	8004900 <_svfiprintf_r+0x54>
 800490c:	ebba 0b04 	subs.w	fp, sl, r4
 8004910:	d00b      	beq.n	800492a <_svfiprintf_r+0x7e>
 8004912:	465b      	mov	r3, fp
 8004914:	4622      	mov	r2, r4
 8004916:	4629      	mov	r1, r5
 8004918:	4638      	mov	r0, r7
 800491a:	f7ff ff6b 	bl	80047f4 <__ssputs_r>
 800491e:	3001      	adds	r0, #1
 8004920:	f000 80a7 	beq.w	8004a72 <_svfiprintf_r+0x1c6>
 8004924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004926:	445a      	add	r2, fp
 8004928:	9209      	str	r2, [sp, #36]	@ 0x24
 800492a:	f89a 3000 	ldrb.w	r3, [sl]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 809f 	beq.w	8004a72 <_svfiprintf_r+0x1c6>
 8004934:	2300      	movs	r3, #0
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800493e:	f10a 0a01 	add.w	sl, sl, #1
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	9307      	str	r3, [sp, #28]
 8004946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800494a:	931a      	str	r3, [sp, #104]	@ 0x68
 800494c:	4654      	mov	r4, sl
 800494e:	2205      	movs	r2, #5
 8004950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004954:	484e      	ldr	r0, [pc, #312]	@ (8004a90 <_svfiprintf_r+0x1e4>)
 8004956:	f7fb fc43 	bl	80001e0 <memchr>
 800495a:	9a04      	ldr	r2, [sp, #16]
 800495c:	b9d8      	cbnz	r0, 8004996 <_svfiprintf_r+0xea>
 800495e:	06d0      	lsls	r0, r2, #27
 8004960:	bf44      	itt	mi
 8004962:	2320      	movmi	r3, #32
 8004964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004968:	0711      	lsls	r1, r2, #28
 800496a:	bf44      	itt	mi
 800496c:	232b      	movmi	r3, #43	@ 0x2b
 800496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004972:	f89a 3000 	ldrb.w	r3, [sl]
 8004976:	2b2a      	cmp	r3, #42	@ 0x2a
 8004978:	d015      	beq.n	80049a6 <_svfiprintf_r+0xfa>
 800497a:	9a07      	ldr	r2, [sp, #28]
 800497c:	4654      	mov	r4, sl
 800497e:	2000      	movs	r0, #0
 8004980:	f04f 0c0a 	mov.w	ip, #10
 8004984:	4621      	mov	r1, r4
 8004986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498a:	3b30      	subs	r3, #48	@ 0x30
 800498c:	2b09      	cmp	r3, #9
 800498e:	d94b      	bls.n	8004a28 <_svfiprintf_r+0x17c>
 8004990:	b1b0      	cbz	r0, 80049c0 <_svfiprintf_r+0x114>
 8004992:	9207      	str	r2, [sp, #28]
 8004994:	e014      	b.n	80049c0 <_svfiprintf_r+0x114>
 8004996:	eba0 0308 	sub.w	r3, r0, r8
 800499a:	fa09 f303 	lsl.w	r3, r9, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	9304      	str	r3, [sp, #16]
 80049a2:	46a2      	mov	sl, r4
 80049a4:	e7d2      	b.n	800494c <_svfiprintf_r+0xa0>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	1d19      	adds	r1, r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	9103      	str	r1, [sp, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfbb      	ittet	lt
 80049b2:	425b      	neglt	r3, r3
 80049b4:	f042 0202 	orrlt.w	r2, r2, #2
 80049b8:	9307      	strge	r3, [sp, #28]
 80049ba:	9307      	strlt	r3, [sp, #28]
 80049bc:	bfb8      	it	lt
 80049be:	9204      	strlt	r2, [sp, #16]
 80049c0:	7823      	ldrb	r3, [r4, #0]
 80049c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80049c4:	d10a      	bne.n	80049dc <_svfiprintf_r+0x130>
 80049c6:	7863      	ldrb	r3, [r4, #1]
 80049c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ca:	d132      	bne.n	8004a32 <_svfiprintf_r+0x186>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	9203      	str	r2, [sp, #12]
 80049d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049d8:	3402      	adds	r4, #2
 80049da:	9305      	str	r3, [sp, #20]
 80049dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004aa0 <_svfiprintf_r+0x1f4>
 80049e0:	7821      	ldrb	r1, [r4, #0]
 80049e2:	2203      	movs	r2, #3
 80049e4:	4650      	mov	r0, sl
 80049e6:	f7fb fbfb 	bl	80001e0 <memchr>
 80049ea:	b138      	cbz	r0, 80049fc <_svfiprintf_r+0x150>
 80049ec:	9b04      	ldr	r3, [sp, #16]
 80049ee:	eba0 000a 	sub.w	r0, r0, sl
 80049f2:	2240      	movs	r2, #64	@ 0x40
 80049f4:	4082      	lsls	r2, r0
 80049f6:	4313      	orrs	r3, r2
 80049f8:	3401      	adds	r4, #1
 80049fa:	9304      	str	r3, [sp, #16]
 80049fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a00:	4824      	ldr	r0, [pc, #144]	@ (8004a94 <_svfiprintf_r+0x1e8>)
 8004a02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a06:	2206      	movs	r2, #6
 8004a08:	f7fb fbea 	bl	80001e0 <memchr>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d036      	beq.n	8004a7e <_svfiprintf_r+0x1d2>
 8004a10:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <_svfiprintf_r+0x1ec>)
 8004a12:	bb1b      	cbnz	r3, 8004a5c <_svfiprintf_r+0x1b0>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	3307      	adds	r3, #7
 8004a18:	f023 0307 	bic.w	r3, r3, #7
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	9303      	str	r3, [sp, #12]
 8004a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a22:	4433      	add	r3, r6
 8004a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a26:	e76a      	b.n	80048fe <_svfiprintf_r+0x52>
 8004a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	2001      	movs	r0, #1
 8004a30:	e7a8      	b.n	8004984 <_svfiprintf_r+0xd8>
 8004a32:	2300      	movs	r3, #0
 8004a34:	3401      	adds	r4, #1
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f04f 0c0a 	mov.w	ip, #10
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a44:	3a30      	subs	r2, #48	@ 0x30
 8004a46:	2a09      	cmp	r2, #9
 8004a48:	d903      	bls.n	8004a52 <_svfiprintf_r+0x1a6>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0c6      	beq.n	80049dc <_svfiprintf_r+0x130>
 8004a4e:	9105      	str	r1, [sp, #20]
 8004a50:	e7c4      	b.n	80049dc <_svfiprintf_r+0x130>
 8004a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a56:	4604      	mov	r4, r0
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e7f0      	b.n	8004a3e <_svfiprintf_r+0x192>
 8004a5c:	ab03      	add	r3, sp, #12
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	462a      	mov	r2, r5
 8004a62:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <_svfiprintf_r+0x1f0>)
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	4638      	mov	r0, r7
 8004a68:	f3af 8000 	nop.w
 8004a6c:	1c42      	adds	r2, r0, #1
 8004a6e:	4606      	mov	r6, r0
 8004a70:	d1d6      	bne.n	8004a20 <_svfiprintf_r+0x174>
 8004a72:	89ab      	ldrh	r3, [r5, #12]
 8004a74:	065b      	lsls	r3, r3, #25
 8004a76:	f53f af2d 	bmi.w	80048d4 <_svfiprintf_r+0x28>
 8004a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a7c:	e72c      	b.n	80048d8 <_svfiprintf_r+0x2c>
 8004a7e:	ab03      	add	r3, sp, #12
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	462a      	mov	r2, r5
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <_svfiprintf_r+0x1f0>)
 8004a86:	a904      	add	r1, sp, #16
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f000 fa49 	bl	8004f20 <_printf_i>
 8004a8e:	e7ed      	b.n	8004a6c <_svfiprintf_r+0x1c0>
 8004a90:	08005825 	.word	0x08005825
 8004a94:	0800582f 	.word	0x0800582f
 8004a98:	00000000 	.word	0x00000000
 8004a9c:	080047f5 	.word	0x080047f5
 8004aa0:	0800582b 	.word	0x0800582b

08004aa4 <_sungetc_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	1c4b      	adds	r3, r1, #1
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	d103      	bne.n	8004ab4 <_sungetc_r+0x10>
 8004aac:	f04f 35ff 	mov.w	r5, #4294967295
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	8993      	ldrh	r3, [r2, #12]
 8004ab6:	f023 0320 	bic.w	r3, r3, #32
 8004aba:	8193      	strh	r3, [r2, #12]
 8004abc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	b2cd      	uxtb	r5, r1
 8004ac2:	b18b      	cbz	r3, 8004ae8 <_sungetc_r+0x44>
 8004ac4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	dd08      	ble.n	8004adc <_sungetc_r+0x38>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	1e5a      	subs	r2, r3, #1
 8004ace:	6022      	str	r2, [r4, #0]
 8004ad0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	e7e9      	b.n	8004ab0 <_sungetc_r+0xc>
 8004adc:	4621      	mov	r1, r4
 8004ade:	f000 fcc4 	bl	800546a <__submore>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d0f1      	beq.n	8004aca <_sungetc_r+0x26>
 8004ae6:	e7e1      	b.n	8004aac <_sungetc_r+0x8>
 8004ae8:	6921      	ldr	r1, [r4, #16]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	b151      	cbz	r1, 8004b04 <_sungetc_r+0x60>
 8004aee:	4299      	cmp	r1, r3
 8004af0:	d208      	bcs.n	8004b04 <_sungetc_r+0x60>
 8004af2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004af6:	42a9      	cmp	r1, r5
 8004af8:	d104      	bne.n	8004b04 <_sungetc_r+0x60>
 8004afa:	3b01      	subs	r3, #1
 8004afc:	3201      	adds	r2, #1
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	6062      	str	r2, [r4, #4]
 8004b02:	e7d5      	b.n	8004ab0 <_sungetc_r+0xc>
 8004b04:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8004b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b0e:	2303      	movs	r3, #3
 8004b10:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004b12:	4623      	mov	r3, r4
 8004b14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e7dc      	b.n	8004ad8 <_sungetc_r+0x34>

08004b1e <__ssrefill_r>:
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	460c      	mov	r4, r1
 8004b22:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004b24:	b169      	cbz	r1, 8004b42 <__ssrefill_r+0x24>
 8004b26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	d001      	beq.n	8004b32 <__ssrefill_r+0x14>
 8004b2e:	f7ff fe17 	bl	8004760 <_free_r>
 8004b32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	2000      	movs	r0, #0
 8004b38:	6360      	str	r0, [r4, #52]	@ 0x34
 8004b3a:	b113      	cbz	r3, 8004b42 <__ssrefill_r+0x24>
 8004b3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	6923      	ldr	r3, [r4, #16]
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	f043 0320 	orr.w	r3, r3, #32
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	e7f3      	b.n	8004b40 <__ssrefill_r+0x22>

08004b58 <__ssvfiscanf_r>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8004b62:	2100      	movs	r1, #0
 8004b64:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004b68:	49a6      	ldr	r1, [pc, #664]	@ (8004e04 <__ssvfiscanf_r+0x2ac>)
 8004b6a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004b6c:	f10d 0804 	add.w	r8, sp, #4
 8004b70:	49a5      	ldr	r1, [pc, #660]	@ (8004e08 <__ssvfiscanf_r+0x2b0>)
 8004b72:	4fa6      	ldr	r7, [pc, #664]	@ (8004e0c <__ssvfiscanf_r+0x2b4>)
 8004b74:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004b78:	4606      	mov	r6, r0
 8004b7a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	f892 9000 	ldrb.w	r9, [r2]
 8004b82:	f1b9 0f00 	cmp.w	r9, #0
 8004b86:	f000 8158 	beq.w	8004e3a <__ssvfiscanf_r+0x2e2>
 8004b8a:	f817 3009 	ldrb.w	r3, [r7, r9]
 8004b8e:	f013 0308 	ands.w	r3, r3, #8
 8004b92:	f102 0501 	add.w	r5, r2, #1
 8004b96:	d019      	beq.n	8004bcc <__ssvfiscanf_r+0x74>
 8004b98:	6863      	ldr	r3, [r4, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	dd0f      	ble.n	8004bbe <__ssvfiscanf_r+0x66>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	5cba      	ldrb	r2, [r7, r2]
 8004ba4:	0712      	lsls	r2, r2, #28
 8004ba6:	d401      	bmi.n	8004bac <__ssvfiscanf_r+0x54>
 8004ba8:	462a      	mov	r2, r5
 8004baa:	e7e8      	b.n	8004b7e <__ssvfiscanf_r+0x26>
 8004bac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004bae:	3201      	adds	r2, #1
 8004bb0:	9245      	str	r2, [sp, #276]	@ 0x114
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	3a01      	subs	r2, #1
 8004bb8:	6062      	str	r2, [r4, #4]
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	e7ec      	b.n	8004b98 <__ssvfiscanf_r+0x40>
 8004bbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	4798      	blx	r3
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d0e9      	beq.n	8004b9e <__ssvfiscanf_r+0x46>
 8004bca:	e7ed      	b.n	8004ba8 <__ssvfiscanf_r+0x50>
 8004bcc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8004bd0:	f040 8085 	bne.w	8004cde <__ssvfiscanf_r+0x186>
 8004bd4:	9341      	str	r3, [sp, #260]	@ 0x104
 8004bd6:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004bd8:	7853      	ldrb	r3, [r2, #1]
 8004bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bdc:	bf02      	ittt	eq
 8004bde:	2310      	moveq	r3, #16
 8004be0:	1c95      	addeq	r5, r2, #2
 8004be2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004be4:	220a      	movs	r2, #10
 8004be6:	46aa      	mov	sl, r5
 8004be8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004bec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004bf0:	2b09      	cmp	r3, #9
 8004bf2:	d91e      	bls.n	8004c32 <__ssvfiscanf_r+0xda>
 8004bf4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8004e10 <__ssvfiscanf_r+0x2b8>
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	4658      	mov	r0, fp
 8004bfc:	f7fb faf0 	bl	80001e0 <memchr>
 8004c00:	b138      	cbz	r0, 8004c12 <__ssvfiscanf_r+0xba>
 8004c02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004c04:	eba0 000b 	sub.w	r0, r0, fp
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4083      	lsls	r3, r0
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	9341      	str	r3, [sp, #260]	@ 0x104
 8004c10:	4655      	mov	r5, sl
 8004c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c16:	2b78      	cmp	r3, #120	@ 0x78
 8004c18:	d806      	bhi.n	8004c28 <__ssvfiscanf_r+0xd0>
 8004c1a:	2b57      	cmp	r3, #87	@ 0x57
 8004c1c:	d810      	bhi.n	8004c40 <__ssvfiscanf_r+0xe8>
 8004c1e:	2b25      	cmp	r3, #37	@ 0x25
 8004c20:	d05d      	beq.n	8004cde <__ssvfiscanf_r+0x186>
 8004c22:	d857      	bhi.n	8004cd4 <__ssvfiscanf_r+0x17c>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d075      	beq.n	8004d14 <__ssvfiscanf_r+0x1bc>
 8004c28:	2303      	movs	r3, #3
 8004c2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004c2c:	230a      	movs	r3, #10
 8004c2e:	9342      	str	r3, [sp, #264]	@ 0x108
 8004c30:	e088      	b.n	8004d44 <__ssvfiscanf_r+0x1ec>
 8004c32:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004c34:	fb02 1103 	mla	r1, r2, r3, r1
 8004c38:	3930      	subs	r1, #48	@ 0x30
 8004c3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004c3c:	4655      	mov	r5, sl
 8004c3e:	e7d2      	b.n	8004be6 <__ssvfiscanf_r+0x8e>
 8004c40:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004c44:	2a20      	cmp	r2, #32
 8004c46:	d8ef      	bhi.n	8004c28 <__ssvfiscanf_r+0xd0>
 8004c48:	a101      	add	r1, pc, #4	@ (adr r1, 8004c50 <__ssvfiscanf_r+0xf8>)
 8004c4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004d23 	.word	0x08004d23
 8004c54:	08004c29 	.word	0x08004c29
 8004c58:	08004c29 	.word	0x08004c29
 8004c5c:	08004d7d 	.word	0x08004d7d
 8004c60:	08004c29 	.word	0x08004c29
 8004c64:	08004c29 	.word	0x08004c29
 8004c68:	08004c29 	.word	0x08004c29
 8004c6c:	08004c29 	.word	0x08004c29
 8004c70:	08004c29 	.word	0x08004c29
 8004c74:	08004c29 	.word	0x08004c29
 8004c78:	08004c29 	.word	0x08004c29
 8004c7c:	08004d93 	.word	0x08004d93
 8004c80:	08004d79 	.word	0x08004d79
 8004c84:	08004cdb 	.word	0x08004cdb
 8004c88:	08004cdb 	.word	0x08004cdb
 8004c8c:	08004cdb 	.word	0x08004cdb
 8004c90:	08004c29 	.word	0x08004c29
 8004c94:	08004d35 	.word	0x08004d35
 8004c98:	08004c29 	.word	0x08004c29
 8004c9c:	08004c29 	.word	0x08004c29
 8004ca0:	08004c29 	.word	0x08004c29
 8004ca4:	08004c29 	.word	0x08004c29
 8004ca8:	08004da3 	.word	0x08004da3
 8004cac:	08004d3d 	.word	0x08004d3d
 8004cb0:	08004d1b 	.word	0x08004d1b
 8004cb4:	08004c29 	.word	0x08004c29
 8004cb8:	08004c29 	.word	0x08004c29
 8004cbc:	08004d9f 	.word	0x08004d9f
 8004cc0:	08004c29 	.word	0x08004c29
 8004cc4:	08004d79 	.word	0x08004d79
 8004cc8:	08004c29 	.word	0x08004c29
 8004ccc:	08004c29 	.word	0x08004c29
 8004cd0:	08004d23 	.word	0x08004d23
 8004cd4:	3b45      	subs	r3, #69	@ 0x45
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d8a6      	bhi.n	8004c28 <__ssvfiscanf_r+0xd0>
 8004cda:	2305      	movs	r3, #5
 8004cdc:	e031      	b.n	8004d42 <__ssvfiscanf_r+0x1ea>
 8004cde:	6863      	ldr	r3, [r4, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dd0d      	ble.n	8004d00 <__ssvfiscanf_r+0x1a8>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	781a      	ldrb	r2, [r3, #0]
 8004ce8:	454a      	cmp	r2, r9
 8004cea:	f040 80a6 	bne.w	8004e3a <__ssvfiscanf_r+0x2e2>
 8004cee:	3301      	adds	r3, #1
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004cf6:	3a01      	subs	r2, #1
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	6062      	str	r2, [r4, #4]
 8004cfc:	9345      	str	r3, [sp, #276]	@ 0x114
 8004cfe:	e753      	b.n	8004ba8 <__ssvfiscanf_r+0x50>
 8004d00:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004d02:	4621      	mov	r1, r4
 8004d04:	4630      	mov	r0, r6
 8004d06:	4798      	blx	r3
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d0eb      	beq.n	8004ce4 <__ssvfiscanf_r+0x18c>
 8004d0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	f040 808b 	bne.w	8004e2a <__ssvfiscanf_r+0x2d2>
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	e08b      	b.n	8004e32 <__ssvfiscanf_r+0x2da>
 8004d1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004d1c:	f042 0220 	orr.w	r2, r2, #32
 8004d20:	9241      	str	r2, [sp, #260]	@ 0x104
 8004d22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d28:	9241      	str	r2, [sp, #260]	@ 0x104
 8004d2a:	2210      	movs	r2, #16
 8004d2c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004d2e:	9242      	str	r2, [sp, #264]	@ 0x108
 8004d30:	d902      	bls.n	8004d38 <__ssvfiscanf_r+0x1e0>
 8004d32:	e005      	b.n	8004d40 <__ssvfiscanf_r+0x1e8>
 8004d34:	2300      	movs	r3, #0
 8004d36:	9342      	str	r3, [sp, #264]	@ 0x108
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e002      	b.n	8004d42 <__ssvfiscanf_r+0x1ea>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	9342      	str	r3, [sp, #264]	@ 0x108
 8004d40:	2304      	movs	r3, #4
 8004d42:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dd39      	ble.n	8004dbe <__ssvfiscanf_r+0x266>
 8004d4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004d4c:	0659      	lsls	r1, r3, #25
 8004d4e:	d404      	bmi.n	8004d5a <__ssvfiscanf_r+0x202>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	781a      	ldrb	r2, [r3, #0]
 8004d54:	5cba      	ldrb	r2, [r7, r2]
 8004d56:	0712      	lsls	r2, r2, #28
 8004d58:	d438      	bmi.n	8004dcc <__ssvfiscanf_r+0x274>
 8004d5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	dc47      	bgt.n	8004df0 <__ssvfiscanf_r+0x298>
 8004d60:	466b      	mov	r3, sp
 8004d62:	4622      	mov	r2, r4
 8004d64:	a941      	add	r1, sp, #260	@ 0x104
 8004d66:	4630      	mov	r0, r6
 8004d68:	f000 f9f8 	bl	800515c <_scanf_chars>
 8004d6c:	2801      	cmp	r0, #1
 8004d6e:	d064      	beq.n	8004e3a <__ssvfiscanf_r+0x2e2>
 8004d70:	2802      	cmp	r0, #2
 8004d72:	f47f af19 	bne.w	8004ba8 <__ssvfiscanf_r+0x50>
 8004d76:	e7c9      	b.n	8004d0c <__ssvfiscanf_r+0x1b4>
 8004d78:	220a      	movs	r2, #10
 8004d7a:	e7d7      	b.n	8004d2c <__ssvfiscanf_r+0x1d4>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f000 fb3a 	bl	80053f8 <__sccl>
 8004d84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d8a:	9341      	str	r3, [sp, #260]	@ 0x104
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e7d7      	b.n	8004d42 <__ssvfiscanf_r+0x1ea>
 8004d92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d98:	9341      	str	r3, [sp, #260]	@ 0x104
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e7d1      	b.n	8004d42 <__ssvfiscanf_r+0x1ea>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e7cf      	b.n	8004d42 <__ssvfiscanf_r+0x1ea>
 8004da2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004da4:	06c3      	lsls	r3, r0, #27
 8004da6:	f53f aeff 	bmi.w	8004ba8 <__ssvfiscanf_r+0x50>
 8004daa:	9b00      	ldr	r3, [sp, #0]
 8004dac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004dae:	1d19      	adds	r1, r3, #4
 8004db0:	9100      	str	r1, [sp, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	07c0      	lsls	r0, r0, #31
 8004db6:	bf4c      	ite	mi
 8004db8:	801a      	strhmi	r2, [r3, #0]
 8004dba:	601a      	strpl	r2, [r3, #0]
 8004dbc:	e6f4      	b.n	8004ba8 <__ssvfiscanf_r+0x50>
 8004dbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	4798      	blx	r3
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d0bf      	beq.n	8004d4a <__ssvfiscanf_r+0x1f2>
 8004dca:	e79f      	b.n	8004d0c <__ssvfiscanf_r+0x1b4>
 8004dcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004dce:	3201      	adds	r2, #1
 8004dd0:	9245      	str	r2, [sp, #276]	@ 0x114
 8004dd2:	6862      	ldr	r2, [r4, #4]
 8004dd4:	3a01      	subs	r2, #1
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	6062      	str	r2, [r4, #4]
 8004dda:	dd02      	ble.n	8004de2 <__ssvfiscanf_r+0x28a>
 8004ddc:	3301      	adds	r3, #1
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	e7b6      	b.n	8004d50 <__ssvfiscanf_r+0x1f8>
 8004de2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004de4:	4621      	mov	r1, r4
 8004de6:	4630      	mov	r0, r6
 8004de8:	4798      	blx	r3
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d0b0      	beq.n	8004d50 <__ssvfiscanf_r+0x1f8>
 8004dee:	e78d      	b.n	8004d0c <__ssvfiscanf_r+0x1b4>
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	dc0f      	bgt.n	8004e14 <__ssvfiscanf_r+0x2bc>
 8004df4:	466b      	mov	r3, sp
 8004df6:	4622      	mov	r2, r4
 8004df8:	a941      	add	r1, sp, #260	@ 0x104
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f000 fa08 	bl	8005210 <_scanf_i>
 8004e00:	e7b4      	b.n	8004d6c <__ssvfiscanf_r+0x214>
 8004e02:	bf00      	nop
 8004e04:	08004aa5 	.word	0x08004aa5
 8004e08:	08004b1f 	.word	0x08004b1f
 8004e0c:	08005725 	.word	0x08005725
 8004e10:	0800582b 	.word	0x0800582b
 8004e14:	4b0a      	ldr	r3, [pc, #40]	@ (8004e40 <__ssvfiscanf_r+0x2e8>)
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f43f aec6 	beq.w	8004ba8 <__ssvfiscanf_r+0x50>
 8004e1c:	466b      	mov	r3, sp
 8004e1e:	4622      	mov	r2, r4
 8004e20:	a941      	add	r1, sp, #260	@ 0x104
 8004e22:	4630      	mov	r0, r6
 8004e24:	f3af 8000 	nop.w
 8004e28:	e7a0      	b.n	8004d6c <__ssvfiscanf_r+0x214>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	065b      	lsls	r3, r3, #25
 8004e2e:	f53f af71 	bmi.w	8004d14 <__ssvfiscanf_r+0x1bc>
 8004e32:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004e3c:	e7f9      	b.n	8004e32 <__ssvfiscanf_r+0x2da>
 8004e3e:	bf00      	nop
 8004e40:	00000000 	.word	0x00000000

08004e44 <_printf_common>:
 8004e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	4616      	mov	r6, r2
 8004e4a:	4698      	mov	r8, r3
 8004e4c:	688a      	ldr	r2, [r1, #8]
 8004e4e:	690b      	ldr	r3, [r1, #16]
 8004e50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	bfb8      	it	lt
 8004e58:	4613      	movlt	r3, r2
 8004e5a:	6033      	str	r3, [r6, #0]
 8004e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e60:	4607      	mov	r7, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	b10a      	cbz	r2, 8004e6a <_printf_common+0x26>
 8004e66:	3301      	adds	r3, #1
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	0699      	lsls	r1, r3, #26
 8004e6e:	bf42      	ittt	mi
 8004e70:	6833      	ldrmi	r3, [r6, #0]
 8004e72:	3302      	addmi	r3, #2
 8004e74:	6033      	strmi	r3, [r6, #0]
 8004e76:	6825      	ldr	r5, [r4, #0]
 8004e78:	f015 0506 	ands.w	r5, r5, #6
 8004e7c:	d106      	bne.n	8004e8c <_printf_common+0x48>
 8004e7e:	f104 0a19 	add.w	sl, r4, #25
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	6832      	ldr	r2, [r6, #0]
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dc26      	bgt.n	8004eda <_printf_common+0x96>
 8004e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e90:	6822      	ldr	r2, [r4, #0]
 8004e92:	3b00      	subs	r3, #0
 8004e94:	bf18      	it	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	0692      	lsls	r2, r2, #26
 8004e9a:	d42b      	bmi.n	8004ef4 <_printf_common+0xb0>
 8004e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ea0:	4641      	mov	r1, r8
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c8      	blx	r9
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d01e      	beq.n	8004ee8 <_printf_common+0xa4>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	6922      	ldr	r2, [r4, #16]
 8004eae:	f003 0306 	and.w	r3, r3, #6
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf02      	ittt	eq
 8004eb6:	68e5      	ldreq	r5, [r4, #12]
 8004eb8:	6833      	ldreq	r3, [r6, #0]
 8004eba:	1aed      	subeq	r5, r5, r3
 8004ebc:	68a3      	ldr	r3, [r4, #8]
 8004ebe:	bf0c      	ite	eq
 8004ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec4:	2500      	movne	r5, #0
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	bfc4      	itt	gt
 8004eca:	1a9b      	subgt	r3, r3, r2
 8004ecc:	18ed      	addgt	r5, r5, r3
 8004ece:	2600      	movs	r6, #0
 8004ed0:	341a      	adds	r4, #26
 8004ed2:	42b5      	cmp	r5, r6
 8004ed4:	d11a      	bne.n	8004f0c <_printf_common+0xc8>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e008      	b.n	8004eec <_printf_common+0xa8>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4652      	mov	r2, sl
 8004ede:	4641      	mov	r1, r8
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	47c8      	blx	r9
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d103      	bne.n	8004ef0 <_printf_common+0xac>
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef0:	3501      	adds	r5, #1
 8004ef2:	e7c6      	b.n	8004e82 <_printf_common+0x3e>
 8004ef4:	18e1      	adds	r1, r4, r3
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	2030      	movs	r0, #48	@ 0x30
 8004efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004efe:	4422      	add	r2, r4
 8004f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f08:	3302      	adds	r3, #2
 8004f0a:	e7c7      	b.n	8004e9c <_printf_common+0x58>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4622      	mov	r2, r4
 8004f10:	4641      	mov	r1, r8
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c8      	blx	r9
 8004f16:	3001      	adds	r0, #1
 8004f18:	d0e6      	beq.n	8004ee8 <_printf_common+0xa4>
 8004f1a:	3601      	adds	r6, #1
 8004f1c:	e7d9      	b.n	8004ed2 <_printf_common+0x8e>
	...

08004f20 <_printf_i>:
 8004f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	7e0f      	ldrb	r7, [r1, #24]
 8004f26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f28:	2f78      	cmp	r7, #120	@ 0x78
 8004f2a:	4691      	mov	r9, r2
 8004f2c:	4680      	mov	r8, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	469a      	mov	sl, r3
 8004f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f36:	d807      	bhi.n	8004f48 <_printf_i+0x28>
 8004f38:	2f62      	cmp	r7, #98	@ 0x62
 8004f3a:	d80a      	bhi.n	8004f52 <_printf_i+0x32>
 8004f3c:	2f00      	cmp	r7, #0
 8004f3e:	f000 80d1 	beq.w	80050e4 <_printf_i+0x1c4>
 8004f42:	2f58      	cmp	r7, #88	@ 0x58
 8004f44:	f000 80b8 	beq.w	80050b8 <_printf_i+0x198>
 8004f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f50:	e03a      	b.n	8004fc8 <_printf_i+0xa8>
 8004f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f56:	2b15      	cmp	r3, #21
 8004f58:	d8f6      	bhi.n	8004f48 <_printf_i+0x28>
 8004f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f60 <_printf_i+0x40>)
 8004f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f60:	08004fb9 	.word	0x08004fb9
 8004f64:	08004fcd 	.word	0x08004fcd
 8004f68:	08004f49 	.word	0x08004f49
 8004f6c:	08004f49 	.word	0x08004f49
 8004f70:	08004f49 	.word	0x08004f49
 8004f74:	08004f49 	.word	0x08004f49
 8004f78:	08004fcd 	.word	0x08004fcd
 8004f7c:	08004f49 	.word	0x08004f49
 8004f80:	08004f49 	.word	0x08004f49
 8004f84:	08004f49 	.word	0x08004f49
 8004f88:	08004f49 	.word	0x08004f49
 8004f8c:	080050cb 	.word	0x080050cb
 8004f90:	08004ff7 	.word	0x08004ff7
 8004f94:	08005085 	.word	0x08005085
 8004f98:	08004f49 	.word	0x08004f49
 8004f9c:	08004f49 	.word	0x08004f49
 8004fa0:	080050ed 	.word	0x080050ed
 8004fa4:	08004f49 	.word	0x08004f49
 8004fa8:	08004ff7 	.word	0x08004ff7
 8004fac:	08004f49 	.word	0x08004f49
 8004fb0:	08004f49 	.word	0x08004f49
 8004fb4:	0800508d 	.word	0x0800508d
 8004fb8:	6833      	ldr	r3, [r6, #0]
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6032      	str	r2, [r6, #0]
 8004fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e09c      	b.n	8005106 <_printf_i+0x1e6>
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	6820      	ldr	r0, [r4, #0]
 8004fd0:	1d19      	adds	r1, r3, #4
 8004fd2:	6031      	str	r1, [r6, #0]
 8004fd4:	0606      	lsls	r6, r0, #24
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0xbc>
 8004fd8:	681d      	ldr	r5, [r3, #0]
 8004fda:	e003      	b.n	8004fe4 <_printf_i+0xc4>
 8004fdc:	0645      	lsls	r5, r0, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0xb8>
 8004fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fe4:	2d00      	cmp	r5, #0
 8004fe6:	da03      	bge.n	8004ff0 <_printf_i+0xd0>
 8004fe8:	232d      	movs	r3, #45	@ 0x2d
 8004fea:	426d      	negs	r5, r5
 8004fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ff0:	4858      	ldr	r0, [pc, #352]	@ (8005154 <_printf_i+0x234>)
 8004ff2:	230a      	movs	r3, #10
 8004ff4:	e011      	b.n	800501a <_printf_i+0xfa>
 8004ff6:	6821      	ldr	r1, [r4, #0]
 8004ff8:	6833      	ldr	r3, [r6, #0]
 8004ffa:	0608      	lsls	r0, r1, #24
 8004ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005000:	d402      	bmi.n	8005008 <_printf_i+0xe8>
 8005002:	0649      	lsls	r1, r1, #25
 8005004:	bf48      	it	mi
 8005006:	b2ad      	uxthmi	r5, r5
 8005008:	2f6f      	cmp	r7, #111	@ 0x6f
 800500a:	4852      	ldr	r0, [pc, #328]	@ (8005154 <_printf_i+0x234>)
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	bf14      	ite	ne
 8005010:	230a      	movne	r3, #10
 8005012:	2308      	moveq	r3, #8
 8005014:	2100      	movs	r1, #0
 8005016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800501a:	6866      	ldr	r6, [r4, #4]
 800501c:	60a6      	str	r6, [r4, #8]
 800501e:	2e00      	cmp	r6, #0
 8005020:	db05      	blt.n	800502e <_printf_i+0x10e>
 8005022:	6821      	ldr	r1, [r4, #0]
 8005024:	432e      	orrs	r6, r5
 8005026:	f021 0104 	bic.w	r1, r1, #4
 800502a:	6021      	str	r1, [r4, #0]
 800502c:	d04b      	beq.n	80050c6 <_printf_i+0x1a6>
 800502e:	4616      	mov	r6, r2
 8005030:	fbb5 f1f3 	udiv	r1, r5, r3
 8005034:	fb03 5711 	mls	r7, r3, r1, r5
 8005038:	5dc7      	ldrb	r7, [r0, r7]
 800503a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800503e:	462f      	mov	r7, r5
 8005040:	42bb      	cmp	r3, r7
 8005042:	460d      	mov	r5, r1
 8005044:	d9f4      	bls.n	8005030 <_printf_i+0x110>
 8005046:	2b08      	cmp	r3, #8
 8005048:	d10b      	bne.n	8005062 <_printf_i+0x142>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	07df      	lsls	r7, r3, #31
 800504e:	d508      	bpl.n	8005062 <_printf_i+0x142>
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	6861      	ldr	r1, [r4, #4]
 8005054:	4299      	cmp	r1, r3
 8005056:	bfde      	ittt	le
 8005058:	2330      	movle	r3, #48	@ 0x30
 800505a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800505e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005062:	1b92      	subs	r2, r2, r6
 8005064:	6122      	str	r2, [r4, #16]
 8005066:	f8cd a000 	str.w	sl, [sp]
 800506a:	464b      	mov	r3, r9
 800506c:	aa03      	add	r2, sp, #12
 800506e:	4621      	mov	r1, r4
 8005070:	4640      	mov	r0, r8
 8005072:	f7ff fee7 	bl	8004e44 <_printf_common>
 8005076:	3001      	adds	r0, #1
 8005078:	d14a      	bne.n	8005110 <_printf_i+0x1f0>
 800507a:	f04f 30ff 	mov.w	r0, #4294967295
 800507e:	b004      	add	sp, #16
 8005080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f043 0320 	orr.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	4832      	ldr	r0, [pc, #200]	@ (8005158 <_printf_i+0x238>)
 800508e:	2778      	movs	r7, #120	@ 0x78
 8005090:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	6831      	ldr	r1, [r6, #0]
 8005098:	061f      	lsls	r7, r3, #24
 800509a:	f851 5b04 	ldr.w	r5, [r1], #4
 800509e:	d402      	bmi.n	80050a6 <_printf_i+0x186>
 80050a0:	065f      	lsls	r7, r3, #25
 80050a2:	bf48      	it	mi
 80050a4:	b2ad      	uxthmi	r5, r5
 80050a6:	6031      	str	r1, [r6, #0]
 80050a8:	07d9      	lsls	r1, r3, #31
 80050aa:	bf44      	itt	mi
 80050ac:	f043 0320 	orrmi.w	r3, r3, #32
 80050b0:	6023      	strmi	r3, [r4, #0]
 80050b2:	b11d      	cbz	r5, 80050bc <_printf_i+0x19c>
 80050b4:	2310      	movs	r3, #16
 80050b6:	e7ad      	b.n	8005014 <_printf_i+0xf4>
 80050b8:	4826      	ldr	r0, [pc, #152]	@ (8005154 <_printf_i+0x234>)
 80050ba:	e7e9      	b.n	8005090 <_printf_i+0x170>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	f023 0320 	bic.w	r3, r3, #32
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	e7f6      	b.n	80050b4 <_printf_i+0x194>
 80050c6:	4616      	mov	r6, r2
 80050c8:	e7bd      	b.n	8005046 <_printf_i+0x126>
 80050ca:	6833      	ldr	r3, [r6, #0]
 80050cc:	6825      	ldr	r5, [r4, #0]
 80050ce:	6961      	ldr	r1, [r4, #20]
 80050d0:	1d18      	adds	r0, r3, #4
 80050d2:	6030      	str	r0, [r6, #0]
 80050d4:	062e      	lsls	r6, r5, #24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	d501      	bpl.n	80050de <_printf_i+0x1be>
 80050da:	6019      	str	r1, [r3, #0]
 80050dc:	e002      	b.n	80050e4 <_printf_i+0x1c4>
 80050de:	0668      	lsls	r0, r5, #25
 80050e0:	d5fb      	bpl.n	80050da <_printf_i+0x1ba>
 80050e2:	8019      	strh	r1, [r3, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	4616      	mov	r6, r2
 80050ea:	e7bc      	b.n	8005066 <_printf_i+0x146>
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	1d1a      	adds	r2, r3, #4
 80050f0:	6032      	str	r2, [r6, #0]
 80050f2:	681e      	ldr	r6, [r3, #0]
 80050f4:	6862      	ldr	r2, [r4, #4]
 80050f6:	2100      	movs	r1, #0
 80050f8:	4630      	mov	r0, r6
 80050fa:	f7fb f871 	bl	80001e0 <memchr>
 80050fe:	b108      	cbz	r0, 8005104 <_printf_i+0x1e4>
 8005100:	1b80      	subs	r0, r0, r6
 8005102:	6060      	str	r0, [r4, #4]
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	2300      	movs	r3, #0
 800510a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800510e:	e7aa      	b.n	8005066 <_printf_i+0x146>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	4632      	mov	r2, r6
 8005114:	4649      	mov	r1, r9
 8005116:	4640      	mov	r0, r8
 8005118:	47d0      	blx	sl
 800511a:	3001      	adds	r0, #1
 800511c:	d0ad      	beq.n	800507a <_printf_i+0x15a>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	079b      	lsls	r3, r3, #30
 8005122:	d413      	bmi.n	800514c <_printf_i+0x22c>
 8005124:	68e0      	ldr	r0, [r4, #12]
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	4298      	cmp	r0, r3
 800512a:	bfb8      	it	lt
 800512c:	4618      	movlt	r0, r3
 800512e:	e7a6      	b.n	800507e <_printf_i+0x15e>
 8005130:	2301      	movs	r3, #1
 8005132:	4632      	mov	r2, r6
 8005134:	4649      	mov	r1, r9
 8005136:	4640      	mov	r0, r8
 8005138:	47d0      	blx	sl
 800513a:	3001      	adds	r0, #1
 800513c:	d09d      	beq.n	800507a <_printf_i+0x15a>
 800513e:	3501      	adds	r5, #1
 8005140:	68e3      	ldr	r3, [r4, #12]
 8005142:	9903      	ldr	r1, [sp, #12]
 8005144:	1a5b      	subs	r3, r3, r1
 8005146:	42ab      	cmp	r3, r5
 8005148:	dcf2      	bgt.n	8005130 <_printf_i+0x210>
 800514a:	e7eb      	b.n	8005124 <_printf_i+0x204>
 800514c:	2500      	movs	r5, #0
 800514e:	f104 0619 	add.w	r6, r4, #25
 8005152:	e7f5      	b.n	8005140 <_printf_i+0x220>
 8005154:	08005836 	.word	0x08005836
 8005158:	08005847 	.word	0x08005847

0800515c <_scanf_chars>:
 800515c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005160:	4615      	mov	r5, r2
 8005162:	688a      	ldr	r2, [r1, #8]
 8005164:	4680      	mov	r8, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b932      	cbnz	r2, 8005178 <_scanf_chars+0x1c>
 800516a:	698a      	ldr	r2, [r1, #24]
 800516c:	2a00      	cmp	r2, #0
 800516e:	bf14      	ite	ne
 8005170:	f04f 32ff 	movne.w	r2, #4294967295
 8005174:	2201      	moveq	r2, #1
 8005176:	608a      	str	r2, [r1, #8]
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800520c <_scanf_chars+0xb0>
 800517e:	06d1      	lsls	r1, r2, #27
 8005180:	bf5f      	itttt	pl
 8005182:	681a      	ldrpl	r2, [r3, #0]
 8005184:	1d11      	addpl	r1, r2, #4
 8005186:	6019      	strpl	r1, [r3, #0]
 8005188:	6816      	ldrpl	r6, [r2, #0]
 800518a:	2700      	movs	r7, #0
 800518c:	69a0      	ldr	r0, [r4, #24]
 800518e:	b188      	cbz	r0, 80051b4 <_scanf_chars+0x58>
 8005190:	2801      	cmp	r0, #1
 8005192:	d107      	bne.n	80051a4 <_scanf_chars+0x48>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	781a      	ldrb	r2, [r3, #0]
 8005198:	6963      	ldr	r3, [r4, #20]
 800519a:	5c9b      	ldrb	r3, [r3, r2]
 800519c:	b953      	cbnz	r3, 80051b4 <_scanf_chars+0x58>
 800519e:	2f00      	cmp	r7, #0
 80051a0:	d031      	beq.n	8005206 <_scanf_chars+0xaa>
 80051a2:	e022      	b.n	80051ea <_scanf_chars+0x8e>
 80051a4:	2802      	cmp	r0, #2
 80051a6:	d120      	bne.n	80051ea <_scanf_chars+0x8e>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f819 3003 	ldrb.w	r3, [r9, r3]
 80051b0:	071b      	lsls	r3, r3, #28
 80051b2:	d41a      	bmi.n	80051ea <_scanf_chars+0x8e>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	06da      	lsls	r2, r3, #27
 80051b8:	bf5e      	ittt	pl
 80051ba:	682b      	ldrpl	r3, [r5, #0]
 80051bc:	781b      	ldrbpl	r3, [r3, #0]
 80051be:	f806 3b01 	strbpl.w	r3, [r6], #1
 80051c2:	682a      	ldr	r2, [r5, #0]
 80051c4:	686b      	ldr	r3, [r5, #4]
 80051c6:	3201      	adds	r2, #1
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	68a2      	ldr	r2, [r4, #8]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	3a01      	subs	r2, #1
 80051d0:	606b      	str	r3, [r5, #4]
 80051d2:	3701      	adds	r7, #1
 80051d4:	60a2      	str	r2, [r4, #8]
 80051d6:	b142      	cbz	r2, 80051ea <_scanf_chars+0x8e>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dcd7      	bgt.n	800518c <_scanf_chars+0x30>
 80051dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80051e0:	4629      	mov	r1, r5
 80051e2:	4640      	mov	r0, r8
 80051e4:	4798      	blx	r3
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d0d0      	beq.n	800518c <_scanf_chars+0x30>
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	f013 0310 	ands.w	r3, r3, #16
 80051f0:	d105      	bne.n	80051fe <_scanf_chars+0xa2>
 80051f2:	68e2      	ldr	r2, [r4, #12]
 80051f4:	3201      	adds	r2, #1
 80051f6:	60e2      	str	r2, [r4, #12]
 80051f8:	69a2      	ldr	r2, [r4, #24]
 80051fa:	b102      	cbz	r2, 80051fe <_scanf_chars+0xa2>
 80051fc:	7033      	strb	r3, [r6, #0]
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	443b      	add	r3, r7
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	2000      	movs	r0, #0
 8005206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800520a:	bf00      	nop
 800520c:	08005725 	.word	0x08005725

08005210 <_scanf_i>:
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	4698      	mov	r8, r3
 8005216:	4b74      	ldr	r3, [pc, #464]	@ (80053e8 <_scanf_i+0x1d8>)
 8005218:	460c      	mov	r4, r1
 800521a:	4682      	mov	sl, r0
 800521c:	4616      	mov	r6, r2
 800521e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005222:	b087      	sub	sp, #28
 8005224:	ab03      	add	r3, sp, #12
 8005226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800522a:	4b70      	ldr	r3, [pc, #448]	@ (80053ec <_scanf_i+0x1dc>)
 800522c:	69a1      	ldr	r1, [r4, #24]
 800522e:	4a70      	ldr	r2, [pc, #448]	@ (80053f0 <_scanf_i+0x1e0>)
 8005230:	2903      	cmp	r1, #3
 8005232:	bf08      	it	eq
 8005234:	461a      	moveq	r2, r3
 8005236:	68a3      	ldr	r3, [r4, #8]
 8005238:	9201      	str	r2, [sp, #4]
 800523a:	1e5a      	subs	r2, r3, #1
 800523c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005240:	bf88      	it	hi
 8005242:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005246:	4627      	mov	r7, r4
 8005248:	bf82      	ittt	hi
 800524a:	eb03 0905 	addhi.w	r9, r3, r5
 800524e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005252:	60a3      	strhi	r3, [r4, #8]
 8005254:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005258:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800525c:	bf98      	it	ls
 800525e:	f04f 0900 	movls.w	r9, #0
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	463d      	mov	r5, r7
 8005266:	f04f 0b00 	mov.w	fp, #0
 800526a:	6831      	ldr	r1, [r6, #0]
 800526c:	ab03      	add	r3, sp, #12
 800526e:	7809      	ldrb	r1, [r1, #0]
 8005270:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005274:	2202      	movs	r2, #2
 8005276:	f7fa ffb3 	bl	80001e0 <memchr>
 800527a:	b328      	cbz	r0, 80052c8 <_scanf_i+0xb8>
 800527c:	f1bb 0f01 	cmp.w	fp, #1
 8005280:	d159      	bne.n	8005336 <_scanf_i+0x126>
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	b92a      	cbnz	r2, 8005292 <_scanf_i+0x82>
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	2108      	movs	r1, #8
 800528a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800528e:	6061      	str	r1, [r4, #4]
 8005290:	6022      	str	r2, [r4, #0]
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005298:	6022      	str	r2, [r4, #0]
 800529a:	68a2      	ldr	r2, [r4, #8]
 800529c:	1e51      	subs	r1, r2, #1
 800529e:	60a1      	str	r1, [r4, #8]
 80052a0:	b192      	cbz	r2, 80052c8 <_scanf_i+0xb8>
 80052a2:	6832      	ldr	r2, [r6, #0]
 80052a4:	1c51      	adds	r1, r2, #1
 80052a6:	6031      	str	r1, [r6, #0]
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	f805 2b01 	strb.w	r2, [r5], #1
 80052ae:	6872      	ldr	r2, [r6, #4]
 80052b0:	3a01      	subs	r2, #1
 80052b2:	2a00      	cmp	r2, #0
 80052b4:	6072      	str	r2, [r6, #4]
 80052b6:	dc07      	bgt.n	80052c8 <_scanf_i+0xb8>
 80052b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80052bc:	4631      	mov	r1, r6
 80052be:	4650      	mov	r0, sl
 80052c0:	4790      	blx	r2
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f040 8085 	bne.w	80053d2 <_scanf_i+0x1c2>
 80052c8:	f10b 0b01 	add.w	fp, fp, #1
 80052cc:	f1bb 0f03 	cmp.w	fp, #3
 80052d0:	d1cb      	bne.n	800526a <_scanf_i+0x5a>
 80052d2:	6863      	ldr	r3, [r4, #4]
 80052d4:	b90b      	cbnz	r3, 80052da <_scanf_i+0xca>
 80052d6:	230a      	movs	r3, #10
 80052d8:	6063      	str	r3, [r4, #4]
 80052da:	6863      	ldr	r3, [r4, #4]
 80052dc:	4945      	ldr	r1, [pc, #276]	@ (80053f4 <_scanf_i+0x1e4>)
 80052de:	6960      	ldr	r0, [r4, #20]
 80052e0:	1ac9      	subs	r1, r1, r3
 80052e2:	f000 f889 	bl	80053f8 <__sccl>
 80052e6:	f04f 0b00 	mov.w	fp, #0
 80052ea:	68a3      	ldr	r3, [r4, #8]
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03d      	beq.n	800536e <_scanf_i+0x15e>
 80052f2:	6831      	ldr	r1, [r6, #0]
 80052f4:	6960      	ldr	r0, [r4, #20]
 80052f6:	f891 c000 	ldrb.w	ip, [r1]
 80052fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80052fe:	2800      	cmp	r0, #0
 8005300:	d035      	beq.n	800536e <_scanf_i+0x15e>
 8005302:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8005306:	d124      	bne.n	8005352 <_scanf_i+0x142>
 8005308:	0510      	lsls	r0, r2, #20
 800530a:	d522      	bpl.n	8005352 <_scanf_i+0x142>
 800530c:	f10b 0b01 	add.w	fp, fp, #1
 8005310:	f1b9 0f00 	cmp.w	r9, #0
 8005314:	d003      	beq.n	800531e <_scanf_i+0x10e>
 8005316:	3301      	adds	r3, #1
 8005318:	f109 39ff 	add.w	r9, r9, #4294967295
 800531c:	60a3      	str	r3, [r4, #8]
 800531e:	6873      	ldr	r3, [r6, #4]
 8005320:	3b01      	subs	r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	6073      	str	r3, [r6, #4]
 8005326:	dd1b      	ble.n	8005360 <_scanf_i+0x150>
 8005328:	6833      	ldr	r3, [r6, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	68a3      	ldr	r3, [r4, #8]
 8005330:	3b01      	subs	r3, #1
 8005332:	60a3      	str	r3, [r4, #8]
 8005334:	e7d9      	b.n	80052ea <_scanf_i+0xda>
 8005336:	f1bb 0f02 	cmp.w	fp, #2
 800533a:	d1ae      	bne.n	800529a <_scanf_i+0x8a>
 800533c:	6822      	ldr	r2, [r4, #0]
 800533e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005342:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005346:	d1c4      	bne.n	80052d2 <_scanf_i+0xc2>
 8005348:	2110      	movs	r1, #16
 800534a:	6061      	str	r1, [r4, #4]
 800534c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005350:	e7a2      	b.n	8005298 <_scanf_i+0x88>
 8005352:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005356:	6022      	str	r2, [r4, #0]
 8005358:	780b      	ldrb	r3, [r1, #0]
 800535a:	f805 3b01 	strb.w	r3, [r5], #1
 800535e:	e7de      	b.n	800531e <_scanf_i+0x10e>
 8005360:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005364:	4631      	mov	r1, r6
 8005366:	4650      	mov	r0, sl
 8005368:	4798      	blx	r3
 800536a:	2800      	cmp	r0, #0
 800536c:	d0df      	beq.n	800532e <_scanf_i+0x11e>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	05d9      	lsls	r1, r3, #23
 8005372:	d50d      	bpl.n	8005390 <_scanf_i+0x180>
 8005374:	42bd      	cmp	r5, r7
 8005376:	d909      	bls.n	800538c <_scanf_i+0x17c>
 8005378:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800537c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005380:	4632      	mov	r2, r6
 8005382:	4650      	mov	r0, sl
 8005384:	4798      	blx	r3
 8005386:	f105 39ff 	add.w	r9, r5, #4294967295
 800538a:	464d      	mov	r5, r9
 800538c:	42bd      	cmp	r5, r7
 800538e:	d028      	beq.n	80053e2 <_scanf_i+0x1d2>
 8005390:	6822      	ldr	r2, [r4, #0]
 8005392:	f012 0210 	ands.w	r2, r2, #16
 8005396:	d113      	bne.n	80053c0 <_scanf_i+0x1b0>
 8005398:	702a      	strb	r2, [r5, #0]
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	9e01      	ldr	r6, [sp, #4]
 800539e:	4639      	mov	r1, r7
 80053a0:	4650      	mov	r0, sl
 80053a2:	47b0      	blx	r6
 80053a4:	f8d8 3000 	ldr.w	r3, [r8]
 80053a8:	6821      	ldr	r1, [r4, #0]
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	f8c8 2000 	str.w	r2, [r8]
 80053b0:	f011 0f20 	tst.w	r1, #32
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	d00f      	beq.n	80053d8 <_scanf_i+0x1c8>
 80053b8:	6018      	str	r0, [r3, #0]
 80053ba:	68e3      	ldr	r3, [r4, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60e3      	str	r3, [r4, #12]
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	1bed      	subs	r5, r5, r7
 80053c4:	445d      	add	r5, fp
 80053c6:	442b      	add	r3, r5
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	2000      	movs	r0, #0
 80053cc:	b007      	add	sp, #28
 80053ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d2:	f04f 0b00 	mov.w	fp, #0
 80053d6:	e7ca      	b.n	800536e <_scanf_i+0x15e>
 80053d8:	07ca      	lsls	r2, r1, #31
 80053da:	bf4c      	ite	mi
 80053dc:	8018      	strhmi	r0, [r3, #0]
 80053de:	6018      	strpl	r0, [r3, #0]
 80053e0:	e7eb      	b.n	80053ba <_scanf_i+0x1aa>
 80053e2:	2001      	movs	r0, #1
 80053e4:	e7f2      	b.n	80053cc <_scanf_i+0x1bc>
 80053e6:	bf00      	nop
 80053e8:	080056e0 	.word	0x080056e0
 80053ec:	080045cd 	.word	0x080045cd
 80053f0:	0800564d 	.word	0x0800564d
 80053f4:	08005868 	.word	0x08005868

080053f8 <__sccl>:
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	780b      	ldrb	r3, [r1, #0]
 80053fc:	4604      	mov	r4, r0
 80053fe:	2b5e      	cmp	r3, #94	@ 0x5e
 8005400:	bf0b      	itete	eq
 8005402:	784b      	ldrbeq	r3, [r1, #1]
 8005404:	1c4a      	addne	r2, r1, #1
 8005406:	1c8a      	addeq	r2, r1, #2
 8005408:	2100      	movne	r1, #0
 800540a:	bf08      	it	eq
 800540c:	2101      	moveq	r1, #1
 800540e:	3801      	subs	r0, #1
 8005410:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005414:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005418:	42a8      	cmp	r0, r5
 800541a:	d1fb      	bne.n	8005414 <__sccl+0x1c>
 800541c:	b90b      	cbnz	r3, 8005422 <__sccl+0x2a>
 800541e:	1e50      	subs	r0, r2, #1
 8005420:	bd70      	pop	{r4, r5, r6, pc}
 8005422:	f081 0101 	eor.w	r1, r1, #1
 8005426:	54e1      	strb	r1, [r4, r3]
 8005428:	4610      	mov	r0, r2
 800542a:	4602      	mov	r2, r0
 800542c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005430:	2d2d      	cmp	r5, #45	@ 0x2d
 8005432:	d005      	beq.n	8005440 <__sccl+0x48>
 8005434:	2d5d      	cmp	r5, #93	@ 0x5d
 8005436:	d016      	beq.n	8005466 <__sccl+0x6e>
 8005438:	2d00      	cmp	r5, #0
 800543a:	d0f1      	beq.n	8005420 <__sccl+0x28>
 800543c:	462b      	mov	r3, r5
 800543e:	e7f2      	b.n	8005426 <__sccl+0x2e>
 8005440:	7846      	ldrb	r6, [r0, #1]
 8005442:	2e5d      	cmp	r6, #93	@ 0x5d
 8005444:	d0fa      	beq.n	800543c <__sccl+0x44>
 8005446:	42b3      	cmp	r3, r6
 8005448:	dcf8      	bgt.n	800543c <__sccl+0x44>
 800544a:	3002      	adds	r0, #2
 800544c:	461a      	mov	r2, r3
 800544e:	3201      	adds	r2, #1
 8005450:	4296      	cmp	r6, r2
 8005452:	54a1      	strb	r1, [r4, r2]
 8005454:	dcfb      	bgt.n	800544e <__sccl+0x56>
 8005456:	1af2      	subs	r2, r6, r3
 8005458:	3a01      	subs	r2, #1
 800545a:	1c5d      	adds	r5, r3, #1
 800545c:	42b3      	cmp	r3, r6
 800545e:	bfa8      	it	ge
 8005460:	2200      	movge	r2, #0
 8005462:	18ab      	adds	r3, r5, r2
 8005464:	e7e1      	b.n	800542a <__sccl+0x32>
 8005466:	4610      	mov	r0, r2
 8005468:	e7da      	b.n	8005420 <__sccl+0x28>

0800546a <__submore>:
 800546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546e:	460c      	mov	r4, r1
 8005470:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005476:	4299      	cmp	r1, r3
 8005478:	d11d      	bne.n	80054b6 <__submore+0x4c>
 800547a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800547e:	f7fe ff9f 	bl	80043c0 <_malloc_r>
 8005482:	b918      	cbnz	r0, 800548c <__submore+0x22>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005490:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005492:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005496:	6360      	str	r0, [r4, #52]	@ 0x34
 8005498:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800549c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80054a0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80054a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80054a8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80054ac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80054b0:	6020      	str	r0, [r4, #0]
 80054b2:	2000      	movs	r0, #0
 80054b4:	e7e8      	b.n	8005488 <__submore+0x1e>
 80054b6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80054b8:	0077      	lsls	r7, r6, #1
 80054ba:	463a      	mov	r2, r7
 80054bc:	f000 f829 	bl	8005512 <_realloc_r>
 80054c0:	4605      	mov	r5, r0
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d0de      	beq.n	8005484 <__submore+0x1a>
 80054c6:	eb00 0806 	add.w	r8, r0, r6
 80054ca:	4601      	mov	r1, r0
 80054cc:	4632      	mov	r2, r6
 80054ce:	4640      	mov	r0, r8
 80054d0:	f7ff f938 	bl	8004744 <memcpy>
 80054d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80054d8:	f8c4 8000 	str.w	r8, [r4]
 80054dc:	e7e9      	b.n	80054b2 <__submore+0x48>

080054de <memmove>:
 80054de:	4288      	cmp	r0, r1
 80054e0:	b510      	push	{r4, lr}
 80054e2:	eb01 0402 	add.w	r4, r1, r2
 80054e6:	d902      	bls.n	80054ee <memmove+0x10>
 80054e8:	4284      	cmp	r4, r0
 80054ea:	4623      	mov	r3, r4
 80054ec:	d807      	bhi.n	80054fe <memmove+0x20>
 80054ee:	1e43      	subs	r3, r0, #1
 80054f0:	42a1      	cmp	r1, r4
 80054f2:	d008      	beq.n	8005506 <memmove+0x28>
 80054f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054fc:	e7f8      	b.n	80054f0 <memmove+0x12>
 80054fe:	4402      	add	r2, r0
 8005500:	4601      	mov	r1, r0
 8005502:	428a      	cmp	r2, r1
 8005504:	d100      	bne.n	8005508 <memmove+0x2a>
 8005506:	bd10      	pop	{r4, pc}
 8005508:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800550c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005510:	e7f7      	b.n	8005502 <memmove+0x24>

08005512 <_realloc_r>:
 8005512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005516:	4607      	mov	r7, r0
 8005518:	4614      	mov	r4, r2
 800551a:	460d      	mov	r5, r1
 800551c:	b921      	cbnz	r1, 8005528 <_realloc_r+0x16>
 800551e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005522:	4611      	mov	r1, r2
 8005524:	f7fe bf4c 	b.w	80043c0 <_malloc_r>
 8005528:	b92a      	cbnz	r2, 8005536 <_realloc_r+0x24>
 800552a:	f7ff f919 	bl	8004760 <_free_r>
 800552e:	4625      	mov	r5, r4
 8005530:	4628      	mov	r0, r5
 8005532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005536:	f000 f88b 	bl	8005650 <_malloc_usable_size_r>
 800553a:	4284      	cmp	r4, r0
 800553c:	4606      	mov	r6, r0
 800553e:	d802      	bhi.n	8005546 <_realloc_r+0x34>
 8005540:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005544:	d8f4      	bhi.n	8005530 <_realloc_r+0x1e>
 8005546:	4621      	mov	r1, r4
 8005548:	4638      	mov	r0, r7
 800554a:	f7fe ff39 	bl	80043c0 <_malloc_r>
 800554e:	4680      	mov	r8, r0
 8005550:	b908      	cbnz	r0, 8005556 <_realloc_r+0x44>
 8005552:	4645      	mov	r5, r8
 8005554:	e7ec      	b.n	8005530 <_realloc_r+0x1e>
 8005556:	42b4      	cmp	r4, r6
 8005558:	4622      	mov	r2, r4
 800555a:	4629      	mov	r1, r5
 800555c:	bf28      	it	cs
 800555e:	4632      	movcs	r2, r6
 8005560:	f7ff f8f0 	bl	8004744 <memcpy>
 8005564:	4629      	mov	r1, r5
 8005566:	4638      	mov	r0, r7
 8005568:	f7ff f8fa 	bl	8004760 <_free_r>
 800556c:	e7f1      	b.n	8005552 <_realloc_r+0x40>
	...

08005570 <_strtoul_l.isra.0>:
 8005570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005574:	4e34      	ldr	r6, [pc, #208]	@ (8005648 <_strtoul_l.isra.0+0xd8>)
 8005576:	4686      	mov	lr, r0
 8005578:	460d      	mov	r5, r1
 800557a:	4628      	mov	r0, r5
 800557c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005580:	5d37      	ldrb	r7, [r6, r4]
 8005582:	f017 0708 	ands.w	r7, r7, #8
 8005586:	d1f8      	bne.n	800557a <_strtoul_l.isra.0+0xa>
 8005588:	2c2d      	cmp	r4, #45	@ 0x2d
 800558a:	d110      	bne.n	80055ae <_strtoul_l.isra.0+0x3e>
 800558c:	782c      	ldrb	r4, [r5, #0]
 800558e:	2701      	movs	r7, #1
 8005590:	1c85      	adds	r5, r0, #2
 8005592:	f033 0010 	bics.w	r0, r3, #16
 8005596:	d115      	bne.n	80055c4 <_strtoul_l.isra.0+0x54>
 8005598:	2c30      	cmp	r4, #48	@ 0x30
 800559a:	d10d      	bne.n	80055b8 <_strtoul_l.isra.0+0x48>
 800559c:	7828      	ldrb	r0, [r5, #0]
 800559e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80055a2:	2858      	cmp	r0, #88	@ 0x58
 80055a4:	d108      	bne.n	80055b8 <_strtoul_l.isra.0+0x48>
 80055a6:	786c      	ldrb	r4, [r5, #1]
 80055a8:	3502      	adds	r5, #2
 80055aa:	2310      	movs	r3, #16
 80055ac:	e00a      	b.n	80055c4 <_strtoul_l.isra.0+0x54>
 80055ae:	2c2b      	cmp	r4, #43	@ 0x2b
 80055b0:	bf04      	itt	eq
 80055b2:	782c      	ldrbeq	r4, [r5, #0]
 80055b4:	1c85      	addeq	r5, r0, #2
 80055b6:	e7ec      	b.n	8005592 <_strtoul_l.isra.0+0x22>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f6      	bne.n	80055aa <_strtoul_l.isra.0+0x3a>
 80055bc:	2c30      	cmp	r4, #48	@ 0x30
 80055be:	bf14      	ite	ne
 80055c0:	230a      	movne	r3, #10
 80055c2:	2308      	moveq	r3, #8
 80055c4:	f04f 38ff 	mov.w	r8, #4294967295
 80055c8:	2600      	movs	r6, #0
 80055ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80055ce:	fb03 f908 	mul.w	r9, r3, r8
 80055d2:	ea6f 0909 	mvn.w	r9, r9
 80055d6:	4630      	mov	r0, r6
 80055d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80055dc:	f1bc 0f09 	cmp.w	ip, #9
 80055e0:	d810      	bhi.n	8005604 <_strtoul_l.isra.0+0x94>
 80055e2:	4664      	mov	r4, ip
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	dd1e      	ble.n	8005626 <_strtoul_l.isra.0+0xb6>
 80055e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80055ec:	d007      	beq.n	80055fe <_strtoul_l.isra.0+0x8e>
 80055ee:	4580      	cmp	r8, r0
 80055f0:	d316      	bcc.n	8005620 <_strtoul_l.isra.0+0xb0>
 80055f2:	d101      	bne.n	80055f8 <_strtoul_l.isra.0+0x88>
 80055f4:	45a1      	cmp	r9, r4
 80055f6:	db13      	blt.n	8005620 <_strtoul_l.isra.0+0xb0>
 80055f8:	fb00 4003 	mla	r0, r0, r3, r4
 80055fc:	2601      	movs	r6, #1
 80055fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005602:	e7e9      	b.n	80055d8 <_strtoul_l.isra.0+0x68>
 8005604:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005608:	f1bc 0f19 	cmp.w	ip, #25
 800560c:	d801      	bhi.n	8005612 <_strtoul_l.isra.0+0xa2>
 800560e:	3c37      	subs	r4, #55	@ 0x37
 8005610:	e7e8      	b.n	80055e4 <_strtoul_l.isra.0+0x74>
 8005612:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005616:	f1bc 0f19 	cmp.w	ip, #25
 800561a:	d804      	bhi.n	8005626 <_strtoul_l.isra.0+0xb6>
 800561c:	3c57      	subs	r4, #87	@ 0x57
 800561e:	e7e1      	b.n	80055e4 <_strtoul_l.isra.0+0x74>
 8005620:	f04f 36ff 	mov.w	r6, #4294967295
 8005624:	e7eb      	b.n	80055fe <_strtoul_l.isra.0+0x8e>
 8005626:	1c73      	adds	r3, r6, #1
 8005628:	d106      	bne.n	8005638 <_strtoul_l.isra.0+0xc8>
 800562a:	2322      	movs	r3, #34	@ 0x22
 800562c:	f8ce 3000 	str.w	r3, [lr]
 8005630:	4630      	mov	r0, r6
 8005632:	b932      	cbnz	r2, 8005642 <_strtoul_l.isra.0+0xd2>
 8005634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005638:	b107      	cbz	r7, 800563c <_strtoul_l.isra.0+0xcc>
 800563a:	4240      	negs	r0, r0
 800563c:	2a00      	cmp	r2, #0
 800563e:	d0f9      	beq.n	8005634 <_strtoul_l.isra.0+0xc4>
 8005640:	b106      	cbz	r6, 8005644 <_strtoul_l.isra.0+0xd4>
 8005642:	1e69      	subs	r1, r5, #1
 8005644:	6011      	str	r1, [r2, #0]
 8005646:	e7f5      	b.n	8005634 <_strtoul_l.isra.0+0xc4>
 8005648:	08005725 	.word	0x08005725

0800564c <_strtoul_r>:
 800564c:	f7ff bf90 	b.w	8005570 <_strtoul_l.isra.0>

08005650 <_malloc_usable_size_r>:
 8005650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005654:	1f18      	subs	r0, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	bfbc      	itt	lt
 800565a:	580b      	ldrlt	r3, [r1, r0]
 800565c:	18c0      	addlt	r0, r0, r3
 800565e:	4770      	bx	lr

08005660 <_init>:
 8005660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005662:	bf00      	nop
 8005664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005666:	bc08      	pop	{r3}
 8005668:	469e      	mov	lr, r3
 800566a:	4770      	bx	lr

0800566c <_fini>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr
